/**
 * Raiz v1.0.5 @ 2021/06/06 - https://raizjs.github.io/
 * License: MIT
 * Author: Wallace Rio (https://wallrio.com)
 */

/*
 *
 * Raiz.js v1.0.0 - Wallace Rio - wallrio.com
 *
 */

var Raiz = (function(){
	function Raiz(Modules){	

		this.version = '1.0.5';

		this.config = {
			domain:''
		};

		this.attachModule = function(ModuleInject){
			var module = new ModuleInject;						
			Raiz.prototype[module.name] = module;			
		}

		Raiz.prototype.init();
		
	}	
	return Raiz;
})();





Raiz.prototype.init = function(callback){
	// set raiz-controller on tag HTML if not exist
	var initController = function(initController){
		var htmlTag = document.querySelector('html');
		if(htmlTag != undefined || htmlTag != null ){
			if(htmlTag.getAttribute('raiz-controller') === undefined || htmlTag.getAttribute('raiz-controller') === null)
			htmlTag.setAttribute('raiz-controller','');
			return false;
		}
		window.requestAnimationFrame(function(){
			initController(initController);
		});
	};
	initController(initController);
}

// find element based on controller attribute -------------------------------

Raiz.prototype.getClassEvent = function(el){	
	
	if(el == null)
		return false;
	if( el.getAttribute('data-raiz-controller') === null && el.getAttribute('raiz-controller') === null){	
		if(el.tagName == 'HTML') return false;
		return Raiz.prototype.getClassEvent(el.parentNode);
	}else{			
		if( el.getAttribute('data-raiz-controller') !== null )
			return el.getAttribute('data-raiz-controller');					

		if( el.getAttribute('raiz-controller') !== null )
			return el.getAttribute('raiz-controller');					
	}	
}


var raiz = new Raiz();



var RaizObserver = (function(){
	function RaizObserver(){

		var self = this;

		this.name = 'observer';
		this.listObserver = [];
		self.string2 = null;
		
		raiz.observer = function(method,callback,options){		

			if(typeof document.body === undefined){

				setTimeout(function(method,callback,options){
					raiz.observer(method,callback,options);
				},100,method,callback,options);

				return;
			}

			var hashCode = function(string) {
			  var hash = 0, i, chr;
			  if (string.length === 0) return hash;
			  for (i = 0; i < string.length; i++) {
			    chr   = string.charCodeAt(i);
			    hash  = ((hash << 5) - hash) + chr;
			    hash |= 0; // Convert to 32bit integer
			  }
			  return hash;
			};

			// var ref = {};

			if(options === undefined)options = {};

			var returnMethod = method(options);

			// console.log(options);

		/*	 if(typeof returnMethod == 'object'){
			// if( RaizEssentials.prototype.checkJson(method) == true ){
				returnMethod = JSON.stringify(returnMethod);
				
			}*/
			
			// console.log('==',returnMethod);
			// callback(method());
			// callback(returnMethod);
			


			// var hashCallback = hashCode(JSON.stringify(callback.toString()));

			var parameters = {
				hash:hashCode(method.toString()),
				// hash:(method.toString()),
				// hash:raiz$f._md5(method.toString()),
				target:method,
				callback:callback,
				options:options
			};

			var count = self.listObserver.length;
			

			// console.log(count);

			var includeIf = true;
			for(var key in self.listObserver){

				

				// if(self.listObserver[key].hash === raiz$f._md5(method.toString())  ){
				if(self.listObserver[key].hash === hashCode(method.toString())  ){

				// console.log(self.listObserver[key].hash , hashCode(method.toString()) );
				// if(self.listObserver[key].hash === (method.toString())){
				// if(self.listObserver[key].hash === RaizEssentials.prototype.md5(method.toString())){
					// includeIf = false;
					// return;
					break;
				}
			}


			


				callback(returnMethod,options);
			if(includeIf === true){
				self.listObserver[count] = parameters;
				// return;
			}

			// if(includeIf === false)return;

			/*var string1 = JSON.stringify(self.listObserver);
			
			console.log(string1.length,'--',JSON.stringify(self.string2).length);

			if(string1 !== JSON.stringify(self.string2)){
				callback(returnMethod);
				self.string2 = self.listObserver;
				// var string2 = JSON.stringify(self.listObserver);
				// console.log(self.listObserver , JSON.stringify(self.string2).length);
				// loop(loop,self.listObserver);
			}
*/


			var loop = function(loop,array){

				var target = parameters['target'] || null;
				var attr = parameters['attr'] || null;
				var callback = parameters['callback'] || null;
				var options = parameters['options'] || null;
				
				
				var result = target(options);
				if( parameters.condition !== result){
					var gardBefore = parameters.condition;
					parameters.condition = result;					
					if(gardBefore != null)
					if(callback)callback.call(result,parameters.condition,options);
				}
				window.requestAnimationFrame(function(){ 
				// setTimeout(function(array){
					loop(loop,array);
				// },150,array);
				});
			}

			// var string1 = JSON.stringify(self.listObserver);
			
			// window.requestAnimationFrame(function(){ 
				// raiz$f._timeFrame(function(loop,listObserver,parameters){
					loop(loop,self.listObserver,parameters);
				// },loop,self.listObserver,parameters);
			// });

			// RaizSettings.prototype.init();
			// if(string1 !== JSON.stringify(self.string2)){
				// self.string2 = self.listObserver;
				// var string2 = JSON.stringify(self.listObserver);
				// console.log(self.listObserver , JSON.stringify(self.string2).length);
				// loop(loop,self.listObserver,parameters);
			// }

			// if(identification === 'admin')
				// console.log(self.listObserver);


		}

		return this;
	}

	

	return RaizObserver;
})();
raiz.attachModule(RaizObserver);


var RaizFunctions = (function(){
	function RaizFunctions(){
		this.name = 'functions';
		this.list = {};
	}

	// RaizFunctions.prototype.initKeyboardPressed();

	return RaizFunctions;
})();
raiz.attachModule(RaizFunctions);

raiz.functions.list._observer = raiz.observer;


//  keyboard ===========================================================
// exemplo: raiz.functions.list._keyboard.keydown(function(keycode){console.log('-',keycode)});

raiz.functions.list._keyboard = {
    _keydown:[],
    keydown:function(callback){
        var count = raiz.functions.list._keyboard._keydown.length;
        raiz.functions.list._keyboard._keydown[count] = callback;
    },
    _keyup:[],
    keyup:function(callback){
        var count = raiz.functions.list._keyboard._keyup.length;
        raiz.functions.list._keyboard._keyup[count] = callback;
    }
};
RaizFunctions.prototype.initKeyboardPressed = function(){      

    window.addEventListener("keydown", function (e) {
        raiz$f._keyboard.keyCodePressed = e.key;
        raiz$f._keyboard.keyPressed = e.code;

        for(var key in raiz.functions.list._keyboard._keydown){
            var func = raiz.functions.list._keyboard._keydown[key];
            func(e.key,e);
        }

    })
    window.addEventListener("keyup", function (e) {     

        raiz$f._keyboard.keyCodePressed = '';
        raiz$f._keyboard.keyPressed = '';

        for(var key in raiz.functions.list._keyboard._keyup){
            var func = raiz.functions.list._keyboard._keyup[key];
            func(e.key,e);
        }

    })
}
RaizFunctions.prototype.initKeyboardPressed();





// Order execute ==================================================
RaizFunctions.prototype.orderExecuteLoop = function(array,index,parameters,options){

    var delay = options.delay || 0;
	// if(parameters === undefined) parameters = {};
    if(array[index] === undefined)return;
    var func = array[index];
    var next = function(parameters){
        setTimeout(function(array,index,parameters,options){
            RaizFunctions.prototype.orderExecuteLoop(array,index+1,parameters,options);
        },delay,array,index,parameters,options);
    };
    func(next,parameters);
}

RaizFunctions.prototype.orderExecuteLoopIndicate = function(listOrderArray,array,index,parameters,options){

    var delay = options.delay || 0;    

    // if(parameters === undefined) parameters = {};
    if(listOrderArray[index] === undefined)return;
    var nameIndicate = listOrderArray[index];
    var func = array[nameIndicate];

    // console.log(func,listOrderArray[index]);

    var next = function(parameters){
        setTimeout(function(listOrderArray,array,index,parameters,options){
            RaizFunctions.prototype.orderExecuteLoopIndicate(listOrderArray,array,index+1,parameters,options);
        },delay,listOrderArray,array,index,parameters,options);
    };
    func(next,parameters);
}

raiz.functions.list._order = function(array,listOrder,options){
    var listOrderArray = listOrder;
    if(listOrder !== undefined){
        listOrderArray = listOrder.split(',');


        
        RaizFunctions.prototype.orderExecuteLoopIndicate(listOrderArray,array,0,{},options);
        return;
    }

    RaizFunctions.prototype.orderExecuteLoop(array,0,{},options);
}

raiz.functions.list._parseCSSText = function(cssText) {
    var cssTxt = cssText.replace(/\/\*(.|\s)*?\*\//g, " ").replace(/\s+/g, " ");
    var style = {}, [,ruleName,rule] = cssTxt.match(/ ?(.*?) ?{([^}]*)}/)||[,,cssTxt];
    var cssToJs = s => s.replace(/\W+\w/g, match => match.slice(-1).toUpperCase());
    var properties = rule.split(";").map(o => o.split(":").map(x => x && x.trim()));
    for (var [property, value] of properties) style[cssToJs(property)] = value;
    return {cssText, ruleName, style};
}

raiz.functions.list._stringToObject = function(sJson,allMode){
    if(sJson == null) sJson = "";
    if(allMode == null) allMode = false;

    
    try{
        if(allMode === false)
            eval('var obj='+'{'+sJson+'}');
        else
            eval('var obj='+''+sJson+'');
    }catch(e){
        obj = null;
    }
    return obj;
}

raiz.functions.list._objectToQuery = function(json){
    // console.log('+',json);
// var jsonToQueryString = function(json) { 
        return '' + Object.keys(json).map(function(key) { 
            if(typeof json[key] == 'object'){
                json[key] = JSON.stringify(json[key]);
            }
            
            return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]); 
        }).join('&'); 
    // };
}

raiz.functions.list._queryToObject = function(str){
    return JSON.parse('{"' + decodeURI(str.replace(/&/g, "\",\"").replace(/=/g,"\":\"")) + '"}')
}



raiz.functions.list._checkComponentInitialized = function(el){ 
    
    if(el === null)return null;

    if(el.getAttribute === undefined){
        var result = raiz.functions.list._checkComponentInitialized(el.parentNode)     
        return result;
    }
    if( el.getAttribute('initialized') !== 'true'){ 
        if(el.nodeName.toLowerCase() === 'raiz-component') return false;
        if(el.tagName === 'HTML') return null;
        return raiz.functions.list._checkComponentInitialized(el.parentNode);
    }else{          
        if( el.getAttribute('initialized') === 'true')
            return true             
    }   
}


//start: time
raiz.functions.list._time = function(){   
    var callback = arguments[0];
    var args = [];
    var args2 = [];
    var index = 0;
    var index2 = 0;
    for(var key in arguments){
        args2[index2] = arguments[key];
        index2++;
        if(key > 0){            
            args[index] = arguments[key];
            index++;
        }
    }

    setTimeout(function(callback,args,args2){
        if(callback)
            callback.apply(this,args);
        raiz$f._time.apply(this,args2);

    },300,callback,args,args2);

   /* window.requestAnimationFrame(function(){                
        if(callback)
            callback.apply(this,args);
        raiz$f._time.apply(this,args2);
    });*/        
}
//end: time
/*
raiz.functions.list._timeFrame = function(){   

    var callback = arguments[0];
    var args = [];
    var args2 = [];
    var args3 = [];
    var index = 0;
    var index2 = 0;
    for(var key in arguments){
        args2[index2] = arguments[key];
        index2++;
        if(key > 0){            
            args[index] = arguments[key];
            index++;
        }
    }



    window.requestAnimationFrame(function(){  
        if(callback)
            callback.apply(this,args);

        raiz$f._timeFrame.apply(this,args2);
    });
}*/


/*raiz$f._timeFrame(function(arg1,arg2){
    RaizInterpolation.prototype.checkNewElemensInDom(); 
},'abc','123');*/

raiz.functions.list._getQuery = function(url){        
    var qs = url.substring(url.indexOf('?') + 1).split('&');
    for(var i = 0, result = {}; i < qs.length; i++){
        qs[i] = qs[i].split('=');
        result[qs[i][0]] = decodeURIComponent(qs[i][1]);
    }
    return result;
}


raiz.functions.list._md5 = function(string){
    var MD5 = function(d){result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m="0123456789ABCDEF",f="",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _="",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}
    return MD5(string);
}

raiz.functions.list._isjson = function(string){    
    if(string == undefined || string == null || string.replace(/ /g,'') == '' ) return false;
    if (/^[\],:{}\s]*$/.test(string.replace(/\\["\\\/bfnrtu]/g, '@').
    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
      return true;
    }else{
      return false;
    }
}


//start: Browser Size
    raiz.functions.list._size = function(){
        var width = window.innerWidth
        || document.documentElement.clientWidth
        || document.body.clientWidth;
        var height = window.innerHeight
        || document.documentElement.clientHeight
        || document.body.clientHeight;

        var docWidth = null;
        var docHeight = null;

        if(typeof document.body === 'null'){            
            docWidth = document.body.offsetWidth;
            docHeight = document.body.offsetHeight;
        }

        return {
            document:{
                width:docWidth,
                height:docHeight
            },            
            browser:{
                width:width,
                height:height
            }
        };
    };
//end: Browser Size

raiz.functions.list._browser = {
    size:function(){
        var width = window.innerWidth
        || document.documentElement.clientWidth
        || document.body.clientWidth;
        var height = window.innerHeight
        || document.documentElement.clientHeight
        || document.body.clientHeight;

        return {
            width:width,
            height:height
        }
    },
    position:function(element){
        if(element !== undefined)
            return element.getBoundingClientRect();
        return false;
    }
}

raiz.functions.list._object = function(obj){
    
    return {

        size: function() {
            var size = 0, key;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) size++;
            }
            return size;
        }
    }

}

raiz.functions.list._storage = {
    local:{
        test:"abc1",
        check:function(keyName){
            return localStorage.getItem(keyName) == null ? false:true;
        },
        set:function(keyName,valueName){
            localStorage.setItem(keyName,valueName);
        },get:function(keyName){
            return localStorage.getItem(keyName);
        }
    },
    session:{
        check:function(keyName){
            return sessionStorage.getItem(keyName) == null ? false:true;
        },
        set:function(keyName,valueName){
            sessionStorage.setItem(keyName,valueName);
        },get:function(keyName){
            return sessionStorage.getItem(keyName);
        }
    }
};

raiz.functions.list._cookie = {
    check:function(cname){        
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return true;
            }
        }
        return false;
    },
    set:function(cname, cvalue, exdays){        
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+ d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    },
    get:function(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

};

raiz.functions.list._document = {
    size:function(){
        var docWidth = null;
        var docHeight = null;

        if(typeof document.body === 'null'){            
            docWidth = document.body.offsetWidth;
            docHeight = document.body.offsetHeight;
        }
        return {
            width:docWidth,
            height:docHeight
        }
    }
}

// start: ajax    
    raiz.functions.list._ajax = function(options){
        var timeout = options['timeout'] || null; 
        var url = options['url'] || null; 
        var init = options['init'] || null; 
        var success = options['success'] || null; 
        var error = options['error'] || null; 
        var progress = options['progress'] || null; 
        var data = options['data'] || null; 
        var method = options['method'] || 'get'; 
        var header = options['header'] || {}; 
        var json = options['json'] || false; 
        
        var modeSend = null;

        if(options['resolvejson'] === false) 
            var resolvejson = false; 
        else 
            var resolvejson = true; 


        if(options['async'] === false) 
            var async = false; 
        else 
            var async = true; 

        if(url === null || url === undefined){
            return false;
        }

        var xhr = (function(){ 
            try{return new XMLHttpRequest();}catch(e){}
            try{return new ActiveXObject("Msxml3.XMLHTTP");}catch(e){}
            try{return new ActiveXObject("Msxml2.XMLHTTP.6.0");}catch(e){}
            try{return new ActiveXObject("Msxml2.XMLHTTP.3.0");}catch(e){}
            try{return new ActiveXObject("Msxml2.XMLHTTP");}catch(e){}
            try{return new ActiveXObject("Microsoft.XMLHTTP");}catch(e){}
            return null; 
        })(); 

        if(json === true){
            header['Content-Type'] = 'application/json';
        }


            
            if(method.toLowerCase() === 'get' && data != null){ 
                if(url.indexOf('?')==-1)
                    url = url + '?'+raiz$f._objectToQuery(data); 
                else
                    url = url + '&'+raiz$f._objectToQuery(data); 
            };

            if(init)init(xhr);

            xhr.addEventListener("progress", function (e) {


                if(e.lengthComputable) {

                    var porcent = Math.floor((e.loaded / e.total) * 100)

                    if(progress) progress(porcent,e.loaded,e.total,xhr); 
                    // var percentComplete = e.loaded / e.total;
                    // console.log(percentComplete);
                }
            }, false);


            xhr.open(method, url, async); 

            if(timeout)
            xhr.timeout = timeout;

            for(var key in header){
                xhr.setRequestHeader(key, header[key]);
            }

                if(xhr.upload){ 
                    xhr.upload.onprogress = function (e) { 
                        if (e.lengthComputable) { 
                            if(progress) progress(e.loaded,e.total,xhr); 
                        } 
                    }; 
                    xhr.upload.onloadstart = function (e) { 
                        if(progress) progress(0,e.total,xhr); 
                    };
                    xhr.upload.onloadend = function (e) { 
                        if(progress) progress(e.loaded,e.total,xhr); 
                    }; 
                    xhr.upload.onprogress = function (e) { 
                        if (e.lengthComputable) { 
                            var ratio = Math.floor((e.loaded / e.total) * 100) + '%'; 
                        } 
                    }; 
                };
                xhr.onreadystatechange = function () { 
                if(xhr.readyState > 3){ 
                        if ( (xhr.status) < 200 || (xhr.status) > 299) { 
                            var response = xhr.responseText;

                            var responseCheck = response;

                            if(response !== "")                                
                            if(resolvejson === true && raiz$f._isjson(response) == true){
                                response = JSON.parse(response);                        
                            }
                            if(error) error(response,xhr); 
                            return false; 
                        } 
                        
                        
                        var response = xhr.responseText;

                        var responseCheck = response;

                        if(response !== "")
                        if(resolvejson === true && raiz$f._isjson(responseCheck) == true){
                            response = JSON.parse(response);                 
                        }

                        
                        if(success) success(response,xhr); 
                    } 
                };

                if(json === true){
                    // console.log(data);
                    var dataForm = JSON.stringify(data);
                }else{

                    var dataForm = new FormData(); 
                    for (var key in data) { 
                        if (data.hasOwnProperty(key)){                 
                            dataForm.append(key,data[key]); 
                        } 
                    }                        
                }

                

                // xhr.withCredentials = false;

                xhr.send(dataForm); 
                return xhr;
                
    }
// end: ajax  


raiz.functions.list._base64 = {

    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = raiz$f._base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        try{
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        }catch(e){
            console.error('raiz.essentials.decode',input);
            return null;
        }

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = raiz$f._base64._utf8_decode(output);

        return output;

    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

}


raiz.functions.list._getUniqueID = function(){
    var nav = window.navigator;
    var screen = window.screen;
    var guid = nav.mimeTypes.length;
    guid += nav.userAgent.replace(/\D+/g, '');
    guid += nav.plugins.length;
    guid += screen.height || '';
    guid += screen.width || '';
    guid += screen.pixelDepth || '';
    return guid;
}



raiz.functions.list._runOnElementsSeq = function(parameters) {

    var elementSource = parameters['elementSource'];
    var node = parameters['content'];
    var callback = parameters['step'];
    var callbackFinish = parameters['finish'];
    var index = parameters['index'];
    var nivel = parameters['nivel'] || 0;
    var parent = node;

    function seq(array,index,nivel,elementSource,parameters,callback){


        if(array[index] === undefined){
            return;
        }

        var el = array[index];

        // var text = el.innerHTML;
        // text = text.replace(/\n|\s/g,'');        
            // console.log(el,text);
        // if(text !== ''){
        // if(el.nodeName !== '#text'){



            // parameters.el = el;
            parameters.parent = el.parentNode;
            // console.log(index,el,elementSource);

        if(callback)callback(nivel,parameters.parent,el,parameters);


            if(el.childNodes.length > 0){
                // parameters.elementSource = el.parentNode;

                parameters.content = el;
                parameters.nivel = nivel +1;
                raiz.functions.list._runOnElementsSeq(parameters);
                // seq(el.childNodes,0,nivel+1,callback);
            }

            // setTimeout(function(index,elementSource,el,parameters){
                
            // },0,index,elementSource,el,parameters);

            // console.log(index,el);
        // }


        setTimeout(function(array,index,nivel,elementSource,parameters,callback){
            seq(array,index+1,nivel,elementSource,parameters,callback);
        },0,array,index,nivel,elementSource,parameters,callback);
    }

    seq(node.childNodes,0,nivel,elementSource,parameters,callback);

    /*while (node.firstChild) {
        
        console.log(node.firstChild);
        element.appendChild(node.firstChild);
    }*/
}

raiz.functions.list._runOnElements = function(parameters) {

    var element = parameters['elementSource'];
    var node = parameters['content'];
    var callback = parameters['step'];
    var callbackFinish = parameters['finish'];
    var index = parameters['index'];
    var parent = node;
    

    if( index === undefined ){
        parent = null;
        index = 0;
    }

    var els = [];
    for (var i = 0; i < node.childNodes.length; i++) {
        var child = node.childNodes[i];

        var tagName = child.tagName;
        var nodeName = child.nodeName;

        // if(tagName === undefined)
            // tagName = child.nodeName;;

        // console.log('-',parameters);
        // if(tagName !== undefined)
        // var newElement = document.createElement(tagName);

        

        var options = {
                
                // "tagName":tagName,
                // "nodeName":nodeName,
                "parent":parent,
                "elementSource":element,
                "content":child,
                "step":callback,
                "finish":null,
                "index":index+1
            };

        if(child.childNodes.length > 0){



            els[els.length] = raiz.functions.list._runOnElements(options);
            
            // setTimeout(function(index,child,options){
             if(callback)callback(index,element,child,options);
            // },1000,index,child,options);

        }else{
            els[els.length] = child;
            // window.requestAnimationFrame(function(){ 
            // setTimeout(function(index,child,options){
                if(callback)callback(index,element,child,options);
            // },0,index,child,options);
            // });
        }
        // console.log(child.childNodes);
    }

    window.requestAnimationFrame(function(){ 
    // setTimeout(function(callbackFinish){

        if(callbackFinish)callbackFinish(element,node);
    // },0,callbackFinish);
    });
    // console.log(els);
    return els;
}


raiz.functions.list._getAllDescendants = function(node) {
    var all = [];
    getDescendants(node);

    function getDescendants(node) {
        for (var i = 0; i < node.childNodes.length; i++) {
            var child = node.childNodes[i];
            getDescendants(child);
            all.push(child);
        }
    }
    return all;
}

raiz.functions.list._sequential = function(parameters){

    var arrayInner = parameters['array'];
    var callback = parameters['callback'];
    var delay = parameters['delay'] || 300;
    var parametersInner = parameters['parameters'];

    var methodSeq = function(methodSeq,array,index,callback,parametersInner,delay){

        var next = function(parametersNext){
            // if(parametersNext !== undefined)
            // parametersInner = parametersNext;

            // window.requestAnimationFrame(function(){  
            // setTimeout(function(methodSeq,array,index,callback,parametersInner,delay){
                methodSeq(methodSeq,arrayInner,index+1,callback,parametersInner,delay);
            // },delay,methodSeq,array,index,callback,parametersInner,delay);
            // });
        }

        if(array[index] === undefined){
            var next = function(parametersInner){};
            if(callback)callback(index,'finish',array,parametersInner,next);
            return;
        }

        

        if(callback)callback(index,'step',array[index],parametersInner,next);

        /*setTimeout(function(methodSeq,array,index,callback,parametersInner,delay){
            methodSeq(methodSeq,arrayInner,index+1,callback,parametersInner,delay);
        },delay,methodSeq,array,index,callback,parametersInner,delay);*/
    };

    methodSeq(methodSeq,arrayInner,0,callback,parametersInner,delay);
}


/**
 * [ifExist description]
 * executa o callback quando uma variavel existir
 * @param  {[type]}   variable [description]
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */
raiz.functions.list._require = function(variable,callback,variablesPass) {



    var func = function(func,variable,index,callback,numloaded,variablesPass){


        
            if( numloaded > variable.length  ){

                eval('var variableObject = '+variable[0]+';');

                /*if(RaizEssentials.prototype.ifExist.loaded === undefined)
                    RaizEssentials.prototype.ifExist.loaded = [];

                

                var hash = hashCode(JSON.stringify(variableObject));
                var count = RaizEssentials.prototype.ifExist.loaded.length;

                for(var i = 0; i < count; i++){
                    if(RaizEssentials.prototype.ifExist.loaded[i] === hash){
                        return false;
                    }
                }


                RaizEssentials.prototype.ifExist.loaded[count] = hash;*/
                

                if(callback)callback.call(variableObject,variableObject,variable, variablesPass );  
                return false;
            }
        


        if(variable[index] == undefined){
            
            window.requestAnimationFrame(function(){  
            // setTimeout(function(func,variable,index,callback,numloaded,variablesPass){                
                func(func,variable,0,callback,numloaded,variablesPass);
            // },0,func,variable,index,callback,numloaded,variablesPass);
            });
            
            return true;
        }

        
        var variableName = variable[index];
        
        try{
        

            var variableNew = eval(variableName);       

            // console.log(variableName,variableNew);


            if( variableNew != undefined && variableNew != "undefined"){
                var newArg = [];
                var index2 = 0;
                for(var key in arguments){
                    if(key >1){
                        newArg[index2] = arguments[key];
                        index2++;
                    }
                }

                numloaded++;

                // return false;
                index++;
            }

            
        }catch(e){

        }

        window.requestAnimationFrame(function(){  
        // setTimeout(function(func,variable,index,callback,numloaded,variablesPass){
            func(func,variable,index,callback,numloaded,variablesPass);
        // },0,func,variable,index,callback,numloaded,variablesPass);
        });

            

    };


    if(typeof variable == 'string'){
        variable = [variable];
    }

    func(func,variable,0,callback,0,variablesPass);




};



//start: Loop
    RaizFunctions.prototype.loopList = [];
    raiz.functions.list._loop = function(){       
        var callback = arguments[0];
        var delay = arguments[1];
        var args = [];
        var index = 0;
        for(var key in arguments){
            if(key > 1){            
                args[index] = arguments[key];
                index++;
            }
        }
        var count = RaizFunctions.prototype.loopList.length;
        RaizFunctions.prototype.loopList[count] = function(count,callback,delay,args,arguments){
            try{
                if(callback)
                    var returns = callback.apply(arguments,args);

                if(returns === false)return false;

            }catch(e){}

            setTimeout(function(count,callback,delay,args,arguments){
                RaizFunctions.prototype.loopList[count](count,callback,delay,args,arguments);
            },delay,count,callback,delay,args,arguments);
        }
        RaizFunctions.prototype.loopList[count](count,callback,delay,args,arguments);
    }
    // Raiz.prototype.loop = RaizEssentials.prototype.loop;
//end: Loop

raiz.functions.list._ishtml = function(str) {
    return /<[a-z/][\s\S]*>/i.test(str);
}


// percorre os indices de objetos
raiz.functions.list._objectWalk = function(parameters){
    var array = parameters['object'];
    var index = parameters['index'] || 0;
    var callbackPass = parameters['step'];
    var finish = parameters['finish'];

    var content;
    var keycontent;
    var i = 0;
    for(var key in array){                  
        if(i == index){
            keycontent = key;
            content = array[key];                   
            break;
        }
        i++;
    }

    if(content === undefined){
        if(finish)finish(array,keycontent,index-1);
        return false;
    }

    raiz$f._objectWalk.index = index;
    var next = (function(){
        index = raiz$f._objectWalk.index + 1;

        parameters.index = index;

        /*setTimeout(function(parameters){
            raiz$f._objectWalk(parameters);
        },10,parameters);*/

        window.requestAnimationFrame(function(){ 
        // raiz$f._timeFrame(function(parameters){
            raiz$f._objectWalk(parameters);
        // },parameters);
        });

    });

    if(callbackPass)callbackPass(content,keycontent,parameters,next);
};





raiz.functions.list._event  = function(objs,event,callback,mode,par1,par2,par3){

    objs.pressTimingTime = 4;

    var eventArray = event.split(' ');
    var nArgs = arguments;

    var addEv = function(element,mode,nArgs){

        if(mode == undefined)
            mode = true;

        var objs = element ;

        if(objs == undefined)
            objs = window;

        nArgs_reindex = [];
        var index = 0;
        var index2 = 0;
        nArgs_reindex[0] = false;

        for (var i = 0; i <nArgs.length; i++) {
            if(i > 3){
                nArgs_reindex[nArgs_reindex.length] = nArgs[i];
            }
        }
      

        if(objs.addEventListener){

            // objs.pressTimingTime = 4;
            var funcTiming = function(ctx,callback){

                // console.log(ctx.pressTimingTime,ctx.pressTimingVal);

                if(ctx.pressTimingVal === -1)
                    return;


                var pressTimingTime = 3;


                if(objs.getAttribute('pressTimingTime') !== null)
                    pressTimingTime = Number(objs.getAttribute('pressTimingTime'));

                // console.log(ctx.pressTimingVal,pressTimingTime);
                if(ctx.pressTimingVal>= pressTimingTime){
                    ctx.pressTimingVal = -1;
                    if(callback)callback(ctx);
                    return;
                }
                setTimeout(function(ctx,callback){
                    ctx.pressTimingVal++;
                    funcTiming(ctx,callback);
                },1000,ctx,callback);
            }

            
            for (var i = 0; i < eventArray.length; i++) {
                var ev = eventArray[i];

                objs.pressTimingVal = -1;

                if(ev === 'pressTimingTime'){
                    // objs.pressTimingTime = nArgs_reindex[1][ev];                        
                    objs.setAttribute('pressTimingTime',nArgs_reindex[1][ev]);                        
                    continue;
                }

                (function(nArgs_reindex,objs,callback,mode,ev){

                    var pressTiming = null;
                    // objs.pressTimingVal = null;


                    if(ev === 'pressTiming'){
                        

                        ev = 'keydown';
                        pressTiming = 'pressTiming';
                    }   

                    objs.addEventListener(ev,function(e){
                        
                        if(pressTiming === 'pressTiming'){
                            
                            this.pressTimingVal = 0;

                            // console.log(objs,objs.getAttribute('pressTimingTime'));

                            // console.log(this.pressTiming);
                             // if(this.pressTimingVal !== -1){
                            if(this.pressTiming === true){
                                this.pressTimingVal = 0;

                                return;
                            }

                            this.pressTiming = true;
                            funcTiming(this,function(ctx){
                                
                                ctx.pressTiming = false;
                                nArgs_reindex[0] = e;
                                // console.log('ok');
                                if(callback)
                                    return callback.apply(objs,nArgs_reindex);
                            });
                            return;
                        }


                        nArgs_reindex[0] = e;
                        if(callback)
                            return callback.apply(objs,nArgs_reindex);
                    },mode);

                })(nArgs_reindex,objs,callback,mode,ev);

            }
        }else if(objs.attachEvent){
            
            for (var i = 0; i < eventArray.length; i++) {
                var ev = eventArray[i];


                objs.attachEvent('on'+ev,function(e){                        
                    nArgs_reindex[0] = e;
                    if(callback)
                        return callback.call(objs,nArgs_reindex);
                });
            }
        }
    }

    if(typeof objs == 'string'){
        var objs_all = document.querySelectorAll(objs);

        for (var i = 0; i < objs_all.length; i++) {
            var element = objs_all[i];

            (function(element,mode,nArgs){
                addEv(element,mode,nArgs);
            })(element,mode,nArgs);
        }
        return ;
    }


    addEv(objs,mode,nArgs);


};


raiz.functions.list._extend = function(listObjects,ctx) {

    if(ctx == undefined) ctx = this;

    // console.log('ctx',ctx);

    var object = ctx;
    var objectController = ctx.controller;
    
    for (var i in listObjects) {
        if (listObjects.hasOwnProperty(i)) {            
            if(ctx[i] !== listObjects[i])
            ctx[i] = listObjects[i];                
        }
    }

    for(var i in ctx){
        if(i.substring(0,1)=='_'){
            if(listObjects[i] !== ctx[i])
            listObjects[i] = ctx[i];
        }
    }

    if(ctx.construct && ctx.initializedConstruct != true){
        ctx.initializedConstruct = true;
        // ctx.construct();
        setTimeout(function(ctx){
            ctx.construct();
        },300,ctx);
    }

    setTimeout(function(listObjects,ctx){
        raiz$f._extend(listObjects,ctx);
    },300,listObjects,ctx);
}



raiz.functions.list._humanfilesize = function(content){
    content = parseInt(content);
    var i = Math.floor( Math.log(content) / Math.log(1024) );
    content = ( content / Math.pow(1024, i) ).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
    
    return content;
};


raiz.functions.list._isVarExist = function(content){
    try{
        eval('var _isVarExist_ = typeof '+content+'; ');
        if(_isVarExist_ === 'undefined')
            valid = false;
        else
            valid = true;

    }catch(e){
        valid = false;
    }

    return valid;
};


raiz.functions.list._time = function(content, snippetParameters){

    var currentdate = new Date(); 
    var time = currentdate.getTime();

    if(typeof snippetParameters === 'object')
    if( raiz$f._object(snippetParameters).size() < 1 ){callback(time);return;}
    
    var year = currentdate.getFullYear();
    var day = ("0"+currentdate.getDate()).substr(-2);
    var month = ("0"+(currentdate.getMonth()+1)).substr(-2);
    
    var hours = currentdate.getHours();
    var minutes = currentdate.getMinutes();
    var seconds = currentdate.getSeconds();

    day  = ("0" + day).slice(-2)
    month  = ("0" + month).slice(-2)

    hours  = ("0" + hours).slice(-2)
    minutes  = ("0" + minutes).slice(-2)
    seconds  = ("0" + seconds).slice(-2)

    snippetParameters = snippetParameters.replace(/timestamp/gi,currentdate.getTime());
    snippetParameters = snippetParameters.replace(/y/gi,year);
    snippetParameters = snippetParameters.replace(/d/gi,day);
    snippetParameters = snippetParameters.replace(/m/gi,month);
    
    snippetParameters = snippetParameters.replace(/h/gi,hours);
    snippetParameters = snippetParameters.replace(/i/gi,minutes);
    snippetParameters = snippetParameters.replace(/s/gi,seconds);

    

    var test = Number(snippetParameters);
    if(isNaN(test) !== true) snippetParameters = Number(snippetParameters); 

    return snippetParameters;

}



raiz.functions.list._totime = function(content,snippetParameters){

   
    
    var currentdate = new Date(parseInt(content));

    // var currentdate = new Date(); 
    var time = currentdate.getTime();

    if(typeof snippetParameters === 'object')
    if( raiz$f._object(snippetParameters).size() < 1 ){callback(time);return;}
    
    var year = currentdate.getFullYear();
    var day = ("0"+currentdate.getDate()).substr(-2);
    var month = ("0"+(currentdate.getMonth()+1)).substr(-2);
    
    var hours = currentdate.getHours();
    var minutes = currentdate.getMinutes();
    var seconds = currentdate.getSeconds();

    day  = ("0" + day).slice(-2)
    month  = ("0" + month).slice(-2)

    hours  = ("0" + hours).slice(-2)
    minutes  = ("0" + minutes).slice(-2)
    seconds  = ("0" + seconds).slice(-2)

    snippetParameters = String(snippetParameters).replace(/timestamp/gi,currentdate.getTime());
    snippetParameters = String(snippetParameters).replace(/y/gi,year);
    snippetParameters = String(snippetParameters).replace(/d/gi,day);
    snippetParameters = String(snippetParameters).replace(/m/gi,month);    
    snippetParameters = String(snippetParameters).replace(/h/gi,hours);
    snippetParameters = String(snippetParameters).replace(/i/gi,minutes);
    snippetParameters = String(snippetParameters).replace(/s/gi,seconds);

    

    var test = Number(snippetParameters);
    if(isNaN(test) !== true) snippetParameters = Number(snippetParameters); 
    
    return snippetParameters;
};


raiz.functions.list._slugify = function(content){

    var str = content;
    str = str.replace(/^\s+|\s+$/g, ''); // trim
    str = str.toLowerCase();
  
    // remove accents, swap ñ for n, etc
    var from = "ãàáäâéèéëêĩìíïîõòóöôũùúüûñç·/_,:;";
    var to   = "aaaaaeeeeeiiiiiooooouuuuunc------";
    for (var i=0, l=from.length ; i<l ; i++) {
        content = content.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
    }

    content = content.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
        .replace(/\s+/g, '-') // collapse whitespace and replace by -
        .replace(/-+/g, '-'); // collapse dashes


    return content;
}


raiz.functions.list._isInterpolation = function(string){
    var re = /({{[\s\S]*?}})/g;
    var interpolations = String(string).match(re);

    if(interpolations === null) return false;
    // if(interpolations.length > 0) return true;

    return true;
}

raiz.functions.list._monitorElement = function(element,parameters,callback,delay){

    if(parameters === null)parameters = {};

    if(callback)callback(element,parameters,function(){

        if(delay === null){
            window.requestAnimationFrame(function(){                
                setTimeout(function(element,parameters,callback,delay){
                    raiz.functions.list._monitorElement(element,parameters,callback,delay);
                },500,element,parameters,callback,delay);    
                // },delay,element,parameters,callback,delay);    
            });
            return;
        }        

        setTimeout(function(element,parameters,callback,delay){
            raiz.functions.list._monitorElement(element,parameters,callback,delay);
        },delay,element,parameters,callback,delay);        

    });
}


raiz.functions.list.readyList = [];
raiz.functions.list.ready = function(callback){
    var count = raiz.functions.list.readyList.length;
    raiz.functions.list.readyList[count] = callback;

    
}

raiz.functions.list.readyRun = function(){
    for(var key in raiz.functions.list.readyList){
        var func = raiz.functions.list.readyList[key];
        func();
    }
}


raiz.functions.list._event(window,'load',function(){  
    // setTimeout(function(){
        raiz.functions.list.readyRun();
    // },700);   
});




raiz$f = raiz.functions.list;
raiz$ = raiz$f;

var RaizSettings = (function(){
	function RaizSettings(){
		this.name = 'settings';
		
		

		// raiz.essentials.addEvent(window,'load',function(){
			// raiz.loop(function(){				
				
				// raiz.settings.init();
			// },100);
		// });

		return this;
	}

	

	return RaizSettings;
})();
raiz.attachModule(RaizSettings);


RaizSettings.prototype.init = function(){

	var tagSettings = document.querySelector('script[raiz-settings]');



	if(tagSettings == undefined){
		settings = {
			"preloadComponents":'',
			"domain":'',
			"components":{    			
				"cache":false,
				"repositories":{}
			}
		};

		raiz.settings.data = settings;
		

		if(RaizSettings.prototype.init.initialized !== true){

			if(typeof raiz.components !== 'undefined'){
				raiz.components.init();
				// raiz.events.init();
				RaizSettings.prototype.init.initialized = true;
			}
		}

		// window.requestAnimationFrame(function(){  
		setTimeout(function(){
			RaizSettings.prototype.init();
		},10);
		// });

		return false;
	}
	var settings = tagSettings.innerHTML;

	

	try{
		settings = raiz$f._stringToObject(settings,true);
	}catch(e){
		settings = {
			preloadComponents:'',
			domain:''
		};

	}

	raiz.settings.data = settings;


	if(settings.preloadComponents != undefined){
		for(var key in settings.preloadComponents){
			var indCompPath = settings.preloadComponents[key];
			// RaizComponents.prototype.load(indCompPath);
			RaizComponents.prototype.init();  
			
		}
	}


	// raiz$f._timeFrame(function(settings){			
			
	raiz$f._loop(function(settings){
		
		

		if(settings.domain != undefined){
			var page = String(window.location.href).replace(settings.domain,'');
			if(page.substr(0,1)=='/') page = page.substr(1);

			// if(page.indexOf('#'))


			settings.page = page.split('#')[0];

			if(settings.page == '' || settings.page == '/')settings.page = 'home';

			// if(window.location.hash.substr(0,1)=='#')
			settings.hash = window.location.hash.substr(1);
		}

	},200,settings);
	// },settings);


	if(RaizSettings.prototype.init.initialized !== true){
		// RaizEvents.prototype.init();	
		// raiz.events.init();
		// raiz.components.init();
		RaizComponents.prototype.init();  
	}

	RaizSettings.prototype.init.initialized = true;
	
	

}

RaizSettings.prototype.init();

var RaizEssentials = (function(){

	function RaizEssentials(){
        this.name = 'essentials';
        this.listEvents = {};
		this.keyboard = {
            keyCodePressed:'',
            keyPressed:''
        };
	}

    
    

    // filtra methodos de eventos
    RaizEssentials.prototype.filterMethodsEvents = function(controller,parameters,callbackStart){
        
        // console.log(controller);
        var element = controller.container;
        
       /* var checkComponentInitialized = raiz$f._checkComponentInitialized(element);
        if(checkComponentInitialized === false ){
            setTimeout(function(){
                RaizEssentials.prototype.filterMethodsEvents(controller,parameters,callbackStart);
            },300);
            console.log(element);
            return;
            // continue;
        }*/
        
        // if(typeof controller === 'object') return false;
            // controller = JSON.stringify(controller);

        // eval('controller = '+controller+';');
        // console.log();
       
    /*    setTimeout(function(controller){
                window.self = controller;
            },0,controller);*/
        // console.log(controller.property);
        

        // controller._append = raiz.append;
        
        // alert(RaizEssentials.prototype.storage.local.test);

            
       
            // RaizEssentials.prototype.funcs._orderExecute = RaizEssentials.prototype.orderExecute;
            // RaizEssentials.prototype.funcs._stringToObject = RaizEssentials.prototype.stringToObject;



            // controller._stringToObject = RaizEssentials.prototype.stringToObject;
            // controller._objectToQuery = RaizEssentials.prototype.objectToQuery;
            // controller._queryToObject = RaizEssentials.prototype.queryToObject;
            // controller._getQuery = RaizEssentials.prototype.getQuery;

            // controller._object = RaizEssentials.prototype.object;
            // controller._size = RaizEssentials.prototype.size;
            // controller._md5 = RaizEssentials.prototype.md5;
            // controller._isHTML = RaizEssentials.prototype.isHTML;
            // controller._base64 = RaizEssentials.prototype.base64;

            // if(Raiz.prototype)
            // controller._ifexist = RaizEssentials.prototype.ifExist;
        
            // if(Raiz.prototype)
            // controller._require = RaizEssentials.prototype.ifExist;

            // controller._sequential = RaizEssentials.prototype.sequential;
            // controller._extend = RaizEssentials.prototype.extend;
            // controller._size = RaizEssentials.prototype.size;
            // controller._loop = RaizEssentials.prototype.loop;
            // controller._time = RaizEssentials.prototype.time;
            // controller._isjson = RaizEssentials.prototype.checkJson;
            // controller._event = RaizEssentials.prototype.addEvent;
            // controller._ajax = RaizEssentials.prototype.ajax;
            // controller._observer = raiz.observer;
            // controller._cookie = RaizEssentials.prototype.cookie;
            // controller._storage = RaizEssentials.prototype.storage;
            // controller._objectWalk = RaizEssentials.prototype.objectWalk;

            // controller._browser = RaizEssentials.prototype.browser;
            // controller._document = RaizEssentials.prototype.document;
            
            // controller._getUniqueID = RaizEssentials.prototype.getUniqueID;
            
            if(typeof RaizEssentials.prototype.filterMethodsEvents.currentController == 'undefined')
            RaizEssentials.prototype.filterMethodsEvents.currentController = [];



            for(var key in raiz.functions.list){
                controller[key] = raiz.functions.list[key];
            }
            

            // console.log(RaizEssentials.prototype.filterMethodsEvents.currentController.length);

            RaizEssentials.prototype.filterMethodsEvents.currentController[RaizEssentials.prototype.filterMethodsEvents.currentController.length] = controller;

            controller._destroy = function(callback){
                this.container.remove();
                delete this;
            }

            controller._destroyAll = function(callback){
                for (var i = 0; i < RaizEssentials.prototype.filterMethodsEvents.currentController.length; i++) {


                    if(this.container.getAttribute('name') == RaizEssentials.prototype.filterMethodsEvents.currentController[i].container.getAttribute('name')){
                        if(callback) callback(RaizEssentials.prototype.filterMethodsEvents.currentController[i]);
                        RaizEssentials.prototype.filterMethodsEvents.currentController[i].container.remove();                        
                    }
                    
                }
     
            };
            // controller._md5 = RaizEssentials.prototype.md5;

   
           
           /* controller._props = function(container){     

                // console.log(this.container);

                var props2 = {};
                var attrs = container.attributes;
                
                for(var key in attrs){
                    
                    if(typeof  attrs[key] !== 'object') continue;

                    var attrName = String(attrs[key].name);
                    
                  
                    props2[String(attrs[key].name)] = attrs[key].value;

                }


                return props2;
            }
*/  


            controller._selector = function(selector,mode){  

                // if(mode === true){
                    // console.log(controller.container.querySelectorAll(selector));
                    // return controller.container.innerHTML;
                // }      

                try{
                    var el = controller.container.querySelectorAll(selector);
                    
                // console.log('==',controller.container.getAttribute('name'));
                    // if(el[0]) 
                        // el.first = el[0];

                    el.map = function(callback,valInput){
                        for (var i = 0; i < this.length; i++) {
                            if(callback)callback(this[i],i,this.length,valInput);                        
                        }
                    };
                    return el;
                }catch(e){
                    return [];
                }
            }
       
          
        var methodArray = [];
        var index = 0;
        for(var key2 in controller){

            if(key2.substring(0,1)=='_') continue;
       
            methodArray[index] = { key:key2,controller:controller};
            index++;

     
        }
        
        
        

        // var container = controller.container;
        // console.log(controller.container,controller);
        var methodSeq = function(methodSeq,array,index,controller,callback){

            var next = true;

            // console.log(controller);

            var container = controller.container;
            var val = array[index];

            // controller.aaa = val;
            // console.log(val);
            

            try{
                var key = val.key;
            }catch(e){
                if(callback)callback(controller,container);
                return false;
            }

         
            // if(object === undefined) return false;

            var object = val.controller; 

            if (/webkitStorageInfo|webkitIndexedDB/.test(key)) return false;

            var method = object[key];

              

           

            try{
                var elAll = container.querySelectorAll(key);
            }catch(e){
                var elAll = [];
                next = false
            }

            // executa caso o componente seja um meta link
            if(container.tagName.toLowerCase() === 'link'){
                try{

                    var elAll = document.querySelectorAll(key);
                     next = true;
                }catch(e){
                    return;
                };
            }

            if(typeof object[key] !== 'string'){

                // console.log(typeof  object[key] );
                // console.log( elAll );
                if(elAll.length > 0)
                    object[key].dom = elAll;

            }


              

            if(next !== false)
            for(var key2 in elAll){
                var el = elAll[key2];


                 
                if(el.tagName == undefined) continue;

                if(typeof method !== 'function') continue;

                if(method.toString() == "function (){}" ) continue;

                // if(el.raiz === undefined)
                    // continue;

                if(typeof el.raizEvent === 'undefined') el.raizEvent = {};
                if(typeof el.raizEvent.event === 'undefined') el.raizEvent.event = {};
                
                if(el.raizEvent.event.attach !== undefined) {

                    if(el.raizEvent.event.attachKey[key])
                        continue;
                }
  
              

                if(el.raizEvent.event.attachKey == null)
                    el.raizEvent.event.attachKey = {};

                el.raizEvent.event.attachKey[key] = key;
                el.raizEvent.event.attach = method;
                

                RaizEssentials.prototype.attachEventEffective(el,controller,key,method,elAll);
            
            }



            /*index++;
            setTimeout(function(methodSeq,array,index,controller,callback){
                methodSeq(methodSeq,array,index,controller,callback);
            },0,methodSeq,array,index,controller,callback);*/
        }



        var indexseq = 0;
        for(var key in methodArray){

            // console.log(key);
            methodSeq(methodSeq,methodArray,indexseq,controller,function(){
                
            });

            indexseq++;
        }


        // setTimeout(function(callbackStart,parameters){

            if(callbackStart)callbackStart(parameters);
        // },300,callbackStart,parameters)
        
    }


    /**
     * aplica evento de methodos elementos (clicaveis e outros)
     */
    RaizEssentials.prototype.attachEventEffective = function(element,controller,key,events,elAll){

        try{
            var attachEventResult = events.call(element);
        }catch(e){
            
            return false;
        }

        
        for(var keyEvent in attachEventResult){

                

            if(keyEvent == 'attr'){                         
                for(var keyAtt in attachEventResult[keyEvent]){
                    element[keyAtt] = attachEventResult[keyEvent][keyAtt];
                }
            }else if(keyEvent == 'css'){    

                for(var keyAtt in attachEventResult[keyEvent]){                       
                    element['style'][keyAtt] = attachEventResult[keyEvent][keyAtt];                     
                }
            }else{

                var keyEventAdjust = keyEvent.replace(',',' ');     
                // if(typeof element.raiz === 'undefined') element.raiz = {};
                // if(typeof element.raiz.events === 'undefined')
                    // element.raiz.events = {};
                    
                    
                    // console.log('--',keyEventAdjust,element);

                raiz$f._event(element,keyEventAdjust,function(e,attachEventResult,keyEvent,controller){          


                    $return = attachEventResult[keyEvent].call(this,e);             
                    if($return === false){
                        e.preventDefault();
                    } 
                    return $return;
                },null,attachEventResult,keyEvent,controller);

            }
        }
    }





	return RaizEssentials;
})();

raiz.attachModule(RaizEssentials);

var RaizInterpolation = (function(){
	function RaizInterpolation(){
		this.name = 'interpolation';
		this.interpolationRegex = /({{[\s\S]*?}})/igm;			
		// this.masterAttr = 'raiz';
		this.masterAttr = 'aaa';
		this.filterList = {};
		this.elements = [];

		this.time_delay = 1800;
		// this.time_delayAttr = null;

		this.filter = function(filterName,filterMethod){
			this.filterList[filterName] = {};
			this.filterList[filterName].method = filterMethod;
		}

		raiz$f._event(document,'load',function(){
			if(raiz.interpolation.initialized == true)return;
			RaizInterpolation.prototype.captureElement();
		});

		raiz$f._event(window,'load',function(){
			raiz.interpolation.initialized = true;
			RaizInterpolation.prototype.checkNewElemensInDom();	
		});
	}
	return RaizInterpolation;
})();
raiz.attachModule(RaizInterpolation);

RaizInterpolation.prototype.checkNewElemensInDom = function(){

	var sizeDocument = document.querySelector('html').textContent.length;
	if(sizeDocument != RaizInterpolation.prototype.checkNewElemensInDom.sizeDocument){		
		RaizInterpolation.prototype.checkNewElemensInDom.sizeDocument = sizeDocument;
		RaizInterpolation.prototype.captureElement();
	}

	// window.requestAnimationFrame(function(){  
	setTimeout(function(){
		RaizInterpolation.prototype.checkNewElemensInDom();
	},1000);
	// });

}


// captura todos os elementos e atributos
RaizInterpolation.prototype.captureElement = function(){
	var allElements = document.getElementsByTagName("*");
	for (var i = 0; i < allElements.length; i++) {
		var el = allElements[i];


		RaizInterpolation.prototype.processAttr(el);

		// if( el.tagName === 'RAIZ-COMPONENT' && el.getAttribute('initialized') !== 'true' ) continue;
		if( el.tagName === 'SCRIPT' ) continue;
			
		// console.log('--',el.getAttribute('initialized'));

		/*if( el.tagName === 'RAIZ-COMPONENT' ){
			console.log(el);
		}*/


		
		// if( el.tagName === 'RAIZ-COMPONENT' ){
			// console.log('==',el);
		// }
	
		
		// if( el.tagName === 'SCRIPT' ) continue;

		if( el.childNodes != undefined &&  el.childNodes.length > 0){
			for (var a = 0; a < el.childNodes.length; a++) {
				var el2 = el.childNodes[a];
				if(el2[raiz.interpolation.masterAttr] !== undefined) continue;
				// setTimeout(function(el2){

				// window.requestAnimationFrame(function(){ 
					RaizInterpolation.prototype.processElement(el2,'tag');
				// },0,el2);
				// });
			}
		}
	}
}



RaizInterpolation.prototype.processAttr = function(element){

	for (var i = 0; i < element.attributes.length; i++) {
		var attrProp = element.attributes[i];

		
			RaizInterpolation.prototype.processElement(attrProp,'attr',element);

	}
}

RaizInterpolation.prototype.processElement = function(element,mode,elementTag){

	var type = element.nodeName;
	var content = element.nodeValue;

	/*if( mode === 'tag'){
		
		var type = element.nodeName;
		var content = element.nodeValue;

	}else if( mode === 'attr'){
	
		// var type = element.nodeName;
		// var content = elementTag.getAttribute(element.nodeName);

		if(content.indexOf('data.type') != -1){

							
			console.log(elementTag,content);
		}

	}*/

	
	// console.log(element);

	if( raiz.functions.list._checkComponentInitialized(element) === false ){
			setTimeout(function(element){

				RaizInterpolation.prototype.processElement(element,mode,elementTag);
			},10,element);

			return;
		}


	



	

	if(content === null) return;


	

	

	var re = /({{[\s\S]*?}})/g;
	var interpolations = content.match(re);

	if(interpolations === null)return;


	

	if(element[raiz.interpolation.masterAttr] === undefined)
		element[raiz.interpolation.masterAttr] = {};




	// if(elementTag) 
		element[raiz.interpolation.masterAttr].elementTag = elementTag;

	element[raiz.interpolation.masterAttr].mode = mode;
	element[raiz.interpolation.masterAttr].type = type;
	element[raiz.interpolation.masterAttr].contentInitial = content;
	element[raiz.interpolation.masterAttr].reference = content;
	element[raiz.interpolation.masterAttr].interpolations = interpolations;
	element[raiz.interpolation.masterAttr].element = element;
	element[raiz.interpolation.masterAttr].foundtime = (new Date).getTime();


	raiz$f._monitorElement(element,{index:0},function(el,parametersMonitor,nextMonitor){
			


		/*if( raiz.functions.list._checkComponentInitialized(el) === false ){
			nextMonitor();
			return;
		}*/

		if(el[raiz.interpolation.masterAttr] === undefined){
			return;
		}

		var contentInitial = el[raiz.interpolation.masterAttr].contentInitial;
		var reference = el[raiz.interpolation.masterAttr].reference;
		var interpolations = el[raiz.interpolation.masterAttr].interpolations;


		


		el[raiz.interpolation.masterAttr].lastcheck = (new Date).getTime();

		raiz.functions.list._sequential({			
			"array":interpolations,
			"parameters":{
				"element":el,
				"contentInitial":contentInitial,
				"reference":reference
			},
			callback:function(index,status,arrayInterpolUnique,parametersSeq,nextSeq){

				var contentInitial = parametersSeq.contentInitial;
				var element = parametersSeq.element;
				var reference = parametersSeq.reference;

				if(element[raiz.interpolation.masterAttr] === undefined){
					nextMonitor();
					return;
				}

				var currentValue = element[raiz.interpolation.masterAttr].value ;


				if(status === 'finish'){


					if( currentValue !== contentInitial ){

				// console.log(currentValue ,'!==', contentInitial);
					
						

						RaizInterpolation.prototype.publish(element,reference,contentInitial,function(el,itemContentSource,itemContent){

							// el[raiz.interpolation.masterAttr].contentInitial = itemContent;
								// console.log(itemContent);
							// parametersMonitor.contentInitial = itemContent;
/*
							if(itemContentSource.indexOf('data.type') != -1){

						
								console.log(el[raiz.interpolation.masterAttr].elementTag,itemContentSource,itemContent);
							}
*/
							

							if(el[raiz.interpolation.masterAttr].mode === 'tag'){
								el.nodeValue = itemContent;

							}else if(el[raiz.interpolation.masterAttr].mode === 'attr'){
								var elementTag = el[raiz.interpolation.masterAttr].elementTag;
								elementTag.setAttribute(el.nodeName,itemContent);
								// el.nodeValue = itemContent;
							}

							el[raiz.interpolation.masterAttr].value = itemContent;

							nextMonitor();
						});
						
					}else{
						nextMonitor();
					}

					
					return;
				}

				


				RaizInterpolation.prototype.minerInterpol(element,arrayInterpolUnique,function(el,itemContentSource,itemContent){
					
					

					var content = parametersSeq.contentInitial;
					content = content.replace(itemContentSource,itemContent);
					parametersSeq.contentInitial = content;
					// parametersSeq.itemContentSource = itemContentSource;

					nextSeq();

				});
			}
		});

	},raiz.interpolation.time_delay);
	
}



RaizInterpolation.prototype.publish = function(element,itemContentSource,itemContent,callback){	

	var finish = function(){
		// if(callback)callback(element,itemContentSource,itemContent);
	}

/*
	if(/(^ *?\s*?{{[\s\S]*?}}[\s\S]*?$)/g.test(itemContent)){


		RaizInterpolation.prototype.minerInterpol(element,itemContent,function(el,itemContentSource2,itemContent2){

				// console.log(itemContent2);

			if(/(^ *?\s*?{{[\s\S]*?}}[\s\S]*?$)/g.test(itemContent2)){
				// window.requestAnimationFrame(function(){ 
					setTimeout(function(el,itemContentSource2,itemContent2,callback){
						RaizInterpolation.prototype.publish(el,itemContentSource2,itemContent2,callback);			
					},300,el,itemContentSource2,itemContent2,callback);
				// });
				return;
			}

			RaizInterpolation.prototype.publishRun(element,itemContentSource2,itemContent2,function(){
				if(callback)callback(element,itemContentSource,itemContent);
			});

			// if(callback)callback(el,itemContentSource2,itemContent2);


		});
		return;
	}*/


	RaizInterpolation.prototype.publishRun(element,itemContentSource,itemContent,function(){
		if(callback)callback(element,itemContentSource,itemContent);
	});
}

RaizInterpolation.prototype.publishRun = function(element,itemContentSource,itemContent,callback){		

	var elementFinish = element[raiz.interpolation.masterAttr].element;
	var reference = elementFinish[raiz.interpolation.masterAttr].reference;

	var childs = raiz$f._getAllDescendants(document);

	for(var key in childs){
		var el = childs[key];
		// if(typeof el[raiz.interpolation.masterAttr] === 'undefined') continue;
		if(typeof el.raizhtmlinterpolation === 'undefined') continue;
	
		if( el.raizhtmlinterpolation === reference){
			el.parentNode.removeChild(el);
		}
	}

	if(!/(^ *?\s*?{{[\s\S]*?}}[\s\S]*?$)/g.test(reference)){
		if(callback)callback();
		return;
	}

	if(raiz$f._ishtml(itemContent) === true){
		RaizInterpolation.prototype.toHtml(elementFinish,itemContent);
		if(callback)callback();
		return;
	}

	if(/(^ *?\s*?{{[\s\S]*?}}[\s\S]*?$)/g.test(itemContent)){
		if(callback)callback();
		return;
	}
	
	var parent = elementFinish.parentNode;
	var comment = document.createTextNode(itemContent);
	if(parent !== null){											
		parent.insertBefore(comment, elementFinish.nextSibling);	

		comment[raiz.interpolation.masterAttr] = elementFinish[raiz.interpolation.masterAttr];
		comment[raiz.interpolation.masterAttr].element = comment;

		elementFinish.parentNode.removeChild(elementFinish);
	}


	if(callback)callback();
}


RaizInterpolation.prototype.minerInterpol = function(element,itemContentSource,callback){	
	
	RaizInterpolation.prototype.filter(element,itemContentSource,function(element,itemContentSource2,itemContent2){
		
		// window.requestAnimationFrame(function(){ 
		// setTimeout(function(element,itemContentSource2,itemContent2){

			if(callback)callback(element,itemContentSource2,itemContent2);
		// },0,element,itemContentSource2,itemContent2);
		// });
	});
}



RaizInterpolation.prototype.filter = function(element,itemContentSource,callback){	

	
	var setup = RaizInterpolation.prototype.extractInterpolation(itemContentSource);

	var first = setup.first;
	var last = setup.last;
	
	var firstContent = first.content;
	var lastContent = last.content;

	var firstFilter = first.filter;
	var lastFilter = last.filter;

	var content = firstContent;
	var filter = firstFilter;
	var valid = true;

	if(firstContent !== ''){



		try{ 
			content = eval(firstContent);

			

			if(content === undefined || content === 'undefined' || content === null || content === 'null')
				valid = false;
		}catch(e){
			try{
				var nFunc = new Function(firstContent);
				content = nFunc();
			}catch(e){
				valid = false; 
			}
		}




		if(valid === false){
			
			filter = lastFilter;
			var validLast = true;
			try{ 
				content = eval(lastContent);
				if(content === undefined || content === 'undefined' || content === null || content === 'null'){
					validLast = false;
					content = itemContentSource;
				}
			}catch(e){

				try{
					var nFunc = new Function(lastContent);
					content = nFunc();
				}catch(e){
					content = itemContentSource;
					validLast = false; 
				}
			}
		}


	}


	

	RaizInterpolation.prototype.processFilter(element,content,filter,function(element,content){	
		if(callback)callback(element,itemContentSource,content);
	});	

	
}







RaizInterpolation.prototype.processFilter = function(element,content,filter,callback){

	raiz.functions.list._sequential({
		"array":filter,
		"parameters":{
			"content":content,
			"callbackProcessFilter":callback,
			"element":element
		},
		callback:function(index,status,arrayFilterUnique,parameters,next){


			var content = parameters.content;
			var element = parameters.element;
			var callbackProcessFilter = parameters.callbackProcessFilter;



			if(status === 'finish'){				
				if(callbackProcessFilter)callbackProcessFilter(element,content);
				return;
			}




			var keyName = arrayFilterUnique[0]; 
			var keyValue = arrayFilterUnique[1]; 

			try{
				var method = raiz.interpolation.filterList[keyName].method;
				
				method(content,keyValue,function(posContent){
					parameters.content = posContent;
					next(parameters);
				});


			}catch(e){				
				next(parameters);
			}

		}
	});

	
}























RaizInterpolation.prototype.toHtml = function(element,content){

	var reference = element[raiz.interpolation.masterAttr].reference;
	var element = element[raiz.interpolation.masterAttr].element;

	content = content.replace(/[\s\s|\n|\t]/g,' ');	
	content = content.trim();

	var testData = document.createElement('div');
	testData.innerHTML = content;
	
	
	

	var childs = raiz$f._runOnElements({
		"elementSource":element,
		"content":testData,
		"step":function(index,elementSource,child,parameters){

			if(child.nodeName !== '#comment'){
				

				/*if(child[raiz.interpolation.masterAttr] === undefined) 
					child[raiz.interpolation.masterAttr] = {};			

				// el[raiz.interpolation.masterAttr] = element[raiz.interpolation.masterAttr];

				child[raiz.interpolation.masterAttr].element = child;
				child[raiz.interpolation.masterAttr].htmlinterpolation = reference;*/
				child.raizhtmlinterpolation = reference;
				// el[raiz.interpolation.masterAttr].reference = reference;

			}
			// setTimeout(function(child,elementSource,parameters){
			window.requestAnimationFrame(function(){ 
				
				if(elementSource[raiz.interpolation.masterAttr] === undefined){
					return;
				}

				var element = elementSource[raiz.interpolation.masterAttr].element;
				var parent = parameters.parent;
				// if(element.parentNode)
				if(parent === null){
					// console.log(el,element);
					if(element.parentNode)
					element.parentNode.insertBefore(child, element);
					// parent.parentNode.insertBefore(el, parent);
				}else{
					parent.appendChild(child);
				}
		
			});
			// },0,child,elementSource,parameters);



		},
		"finish":function(){
			var gost = document.createTextNode('');
			if(element.parentNode)
			element.parentNode.insertBefore(gost, element.nextSibling);

			gost[raiz.interpolation.masterAttr] = element[raiz.interpolation.masterAttr];
			gost[raiz.interpolation.masterAttr].element = gost;

			// RaizInterpolation.prototype.processElement(gost);
			if(element.parentNode)
			element.parentNode.removeChild(element);
		},
	})



}



RaizInterpolation.prototype.extractInterpolation = function(itemContentSource){	



	var itemContentSourceClear = RaizInterpolation.prototype.cleanInterpolation(itemContentSource);

	var itemContentSourceArray = itemContentSourceClear.split('??');
	var firstSource = itemContentSourceArray[0];
	var lastSource = itemContentSourceArray[1] || '';

	var contentFirst = firstSource;
	if(firstSource.indexOf('>>>') != -1){ 	
		var firstSourceTerm = firstSource.substring(0,firstSource.indexOf('>>>')).trim();
		var firstSourceFilter = firstSource.substring(firstSource.indexOf('>>>')+3).trim();
		var firstSourceFilterArray = firstSourceFilter.split('|');
		contentFirst = firstSourceTerm;
	}

	if(contentFirst !== undefined){
		// contentFirst = contentFirst.replace(/^["'](.+(?=["']$))["']$/, '$1');
	}else{
		contentFirst = null;
	}
	
	


	var contentLast = lastSource;
	if(lastSource.indexOf('>>>') != -1){ 	
		var lastSourceTerm = lastSource.substring(0,lastSource.indexOf('>>>')).trim();
		var lastSourceFilter = lastSource.substring(lastSource.indexOf('>>>')+3).trim();
		var lastSourceFilterArray = lastSourceFilter.split('|');
		contentLast = lastSourceTerm;
	}
	if(contentLast !== undefined){
		// contentLast = contentLast.replace(/^["'](.+(?=["']$))["']$/, '$1');
	}else{
		contentLast = null;
	}
	
	
	

	var filterListFirst = RaizInterpolation.prototype.filterExtract(firstSourceFilterArray);
	var filterListLast = RaizInterpolation.prototype.filterExtract(lastSourceFilterArray);
	
	var result = {};

	result['first'] = {
		content:contentFirst,
		filter:filterListFirst,
	}

	if(contentLast || filterListLast)
	result['last'] = {
		content:contentLast,
		filter:filterListLast,
	}



	return result;
}





RaizInterpolation.prototype.filterExtract = function(firstSourceFilterArray){	

	var filterList = [];
	for(var key in firstSourceFilterArray){
		var unitConfig = firstSourceFilterArray[key].trim();
		var stringFound = unitConfig.match(/(.*)\((.*)\)/i) || unitConfig.match(/(.*)/i);
		
		var filter = stringFound[1];
		var filterConfig = stringFound[2];

		

		var filterConfigObj = raiz$f._stringToObject(filterConfig);
		if(filterConfigObj === null){
			filterConfigObj = filterConfig;
			if( isNaN(filterConfigObj) === false){
				
				filterConfigObj = Number(filterConfigObj);
			}else{

				filterConfigObj = filterConfigObj.replace(/^["'](.+(?=["']$))["']$/, '$1');
			}
		}else{

			if( Object.keys(filterConfigObj).length < 1 )
			filterConfigObj = null;
		}
	

		filterList[filterList.length] = [filter,filterConfigObj];
	}

	return filterList;
}










RaizInterpolation.prototype.cleanInterpolation = function(content){
	var re = /^{{([\s\S]*?)}}$/ig;
	var match = re.exec(content);
	if(match === null) return content;
	content = match[1]
	return content;
}













/* Filtros ============================= */


/*
	delay
	Example: <!--{{ >>> delay(3000)}}-->
 */
raiz.interpolation.filter('delay',function(content,snippetParameters,callback){    
	var delayNumber = snippetParameters;
	setTimeout(function(content){
		callback(content);
	},delayNumber,content);	    
});	


/*
	Time
	Example: <!--{{ >>> totime(h:i:s d/m/y)}}-->
 */
raiz.interpolation.filter('totime',function(content,snippetParameters,callback){    
	var content = raiz.functions.list._totime(content,snippetParameters);		
	if(callback)callback(content);
});	
/*
	Time
	Example: <!--{{ >>> time(h:i:s d/m/y)}}-->
 */
raiz.interpolation.filter('time',function(content,snippetParameters,callback){    
	var snippetParameters = raiz.functions.list._time(content,snippetParameters);	
	if(callback)callback(snippetParameters);
});	


/*
	ajax
	Example: <!-- {{ "" >>> ajax(method:'POST',data:{name:"New Name"},url:'http://localhost/gitlab/onistation/client/README.md')|stop}} -->
 */
raiz.interpolation.filter('ajax',function(content,snippetParameters,callback){		
		
		if(snippetParameters.url === undefined) if(callback)callback(content);

		if(snippetParameters.data === undefined)snippetParameters.data = {};
		snippetParameters.data['content'] = content;

	 	raiz$f._ajax({
	 		url:snippetParameters.url,
	 		method:snippetParameters.method || 'get',
	 		data:snippetParameters.data,
	 		success:function(response){ 			
	 			if(callback)callback(response);
	 		},
	 		error:function(response){
	 			if(callback)callback(response);
	 		}
	 	});


	});


/*
	reverse
	Example: <!-- {{ "ABC" >>> reverse }}  -->
 */
raiz.interpolation.filter('reverse',function(content,snippetParameters,callback){    
    content = String(content).split("").reverse().join(""); 
    callback(content);
});	


/*
	style
	<style>
		.style{
			font-weight:bold;
		}
	</style>

	<script>
	var css = {
		color:'blue',
		'font-size':'40px'
	};
	</script>

	Example: <!--{{ "abc" >>> style($css,.style)}}-->

	Example 2: <!--{{ "abc" >>> style(.newa,color:red,font-size:80px)}}-->
 */
 
raiz.interpolation.filter('style',function(content,snippetParameters,callback){    
	
	

	if(typeof snippetParameters === 'object'){
		
		var cssStyle = '';
		var cssClass = '';
		for(var key in snippetParameters){
			cssStyle += key+':'+snippetParameters[key]+';';
		}

	}else{
		snippetParameters = snippetParameters.split(',');

		var styleList = {};
		for(var key in snippetParameters){
			var item = snippetParameters[key];
			item = item.split(':');

			styleList[ item[0] ] = item[1];
		}	
		

		var cssStyle = '';
		var cssClass = '';
		for(var varKeyRaiz in styleList){


			if( varKeyRaiz.substring(0,1) === '.' ){
				varKeyRaiz = varKeyRaiz.substring(1);
				cssClass += varKeyRaiz+' ';
				continue;
			}
			
			if( varKeyRaiz.substring(0,1) === '$' ){
				varKeyRaiz = varKeyRaiz.substring(1);
				eval('cssVar = '+varKeyRaiz+';');
					
				const styleString = (
				  Object.entries(cssVar).map(([k, v]) => `${k}:${v}`).join(';')
				);

				cssStyle += styleString+';';

				continue;
			}

			cssStyle += varKeyRaiz+':'+styleList[varKeyRaiz]+';';
		}

	}

		cssStyle = cssStyle.replace(/\"/g,"");
		cssClass = cssClass.replace(/\"/g,"");

		var printStyle = '';
		if(cssStyle != '')
		printStyle = 'style="'+cssStyle+'"';

		var printClass = '';
		if(cssClass != '')
		printClass = 'class="'+cssClass+'"';
	
		
	

	content = '<span '+printStyle+' '+printClass+'>'+content+'</span>';	
	callback(content);
	
});	


/*
	lowercase
	Example: <!-- {{ "ABC" >>> lowercase }}  -->
 */
raiz.interpolation.filter('lowercase',function(content,snippetParameters,callback){    
    content = String(content).toLowerCase(); 
    callback(content);
});	

/*
	uppercase
	Example: <!-- {{ "ABC" >>> uppercase }}  -->
 */
raiz.interpolation.filter('uppercase',function(content,snippetParameters,callback){    
    content = String(content).toUpperCase(); 
    callback(content);
});	

/*
	bytes to humen format
	Example: <!-- {{ 1012312 >>> humanfilesize }}  -->
 */
raiz.interpolation.filter('humanfilesize',function(content,snippetParameters,callback){   
	content = raiz.functions.list._humanfilesize(content);
	callback(content);
});	


raiz.interpolation.filter('countjson',function(content,snippetParameters,callback){   
    content = Object.keys(JSON.parse(content)).length; 
    callback(content);
});	



raiz.interpolation.filter('slugify',function(content,snippetParameters,callback){   
    var content = raiz.functions.list._slugify(content);
	
	
    callback(content);
});	







raiz.interpolation.filter('objtotable',function(content,snippetParameters,callback){    

	if( raiz$f._isjson(content) === false ){
		return false;
	}

	content = JSON.parse(content);

	var html = '<table>';
	for(var key2 in content){

		if(key2 === 'index') continue;
		if(key2 === 'count') continue;
		if(key2 === 'created') continue;
		
		html += '<tr>';
		html += '<td>'+key2+'</td><td>';
		html += '<input value="'+content[key2]+'" readonly >';
		html += '</td>';
		html += '</tr>';
	}
	html += '</table>';

	if(callback)callback(html);

});	


raiz.interpolation.filter('tojson',function(content,snippetParameters,callback){    	
	// content = JSON.stringify(content);
	callback(content);
});	

raiz.interpolation.filter('print',function(content,snippetParameters,callback){    	
	callback(snippetParameters);
});	


raiz.interpolation.filter('isExist',function(content,snippetParameters,callback){    	

	var valid = true;

	try{ 
		eval(content);
	}catch(e){
		valid = false;
	}

	callback(valid);
});	



var  __version__ = raiz.version;
var  __helloworld__ = 'Congratulations, <strong>Raiz '+raiz.version+'</strong> was successfully loaded';



var RaizIf = (function(){
	function RaizIf(){
		this.name = 'if';

		this.list = {};

		var style = document.createElement('style');
		// style.innerHTML='[raiz-if]{visibility:hidden !important;max-height:0px;opacity:0}';
		// style.innerHTML='[raiz-if]{display:none !important}';
		document.querySelector('head').appendChild(style);

		raiz$f._event(window,'load',function(){
		// raiz$f._event(document,'load',function(){			

			// raiz$f._timeFrame(function(){			
				RaizIf.prototype.init();
			// });	
			// raiz.loop(function(){		
				// RaizIf.prototype.init();
			// });			
		});

	}

	

	return RaizIf;
})();
raiz.attachModule(RaizIf);

RaizIf.prototype.init = function(){

	var raizIfrAll = document.querySelectorAll('[raiz-if],[data-raiz-if],[raiz-if-show],[data-raiz-if-show]');



	for (var i = 0; i < raizIfrAll.length; i++) {
		var el = raizIfrAll[i];
		
		if(typeof el.raiz === 'undefined') el.raiz = {};		



		if(typeof el.raiz.if === 'undefined'){
			el.raiz.if = {} ;
			el.raiz.if.initialized = true;
			el.raiz.if.current = null;
			// el.raiz.if.display = el.style['display'] ;
		}else{


			if(typeof el.raiz.if.initialized !== 'undefined')
			continue;
		// console.log(3);
		}


		
		

		var id = new Date().getTime();

		raiz.if.list[id] = el;

		RaizIf.prototype.monitor(id,el);

	}

	setTimeout(function(){
		RaizIf.prototype.init();
	},2000);
}

RaizIf.prototype.monitor = function(id,el,gost){


	

	var virtualEl = raiz.if.list[id];
	// console.log(.getAttribute('raiz-if'));

	var condition = virtualEl.getAttribute('raiz-if');
	if(condition == null)
		condition = virtualEl.getAttribute('raiz-if-show');

	

	var classEvent = raiz.getClassEvent(virtualEl);	
	condition = condition.replace(/this\./g,classEvent+'.');
	condition = condition.replace(/self\./g,classEvent+'.');
	
	try{
		var cond = eval(condition);			
	}catch(e){

		
		/*setTimeout(function(id,el,gost){
			RaizIf.prototype.monitor(id,el,gost);
		},300,id,el,gost);
		return;*/
		// console.log(condition);
		var cond = null;

		// var cond = eval(cond);			
		// console.log(cond,condition);
	}



	if(gost == null){

		if(cond !== false || cond !== null){
		// if(cond !== false ){

			if( el.getAttribute('raiz-if-true-show') !== null 
				|| el.getAttribute('raiz-if-true-hide') !== null 
				|| el.getAttribute('raiz-if-false-hide') !== null 
				|| el.getAttribute('raiz-if-false-show') !== null 
			){

				

				try{		
					var gost = document.createTextNode('');
					// var gost = document.createElement('span');
					gost.clone = el;
					gost.innerHTML = 't';
					gost.id = 'raiz-if-posittion-'+id;

					el.parentNode.insertBefore(gost,el.nextSibling);	
					el.parentNode.removeChild(el);
				}catch(e){

				}
			}
		}
	}

	if(virtualEl.raiz.if.current != cond){
		virtualEl.raiz.if.current = cond;


		RaizIf.prototype.ifJs(virtualEl,cond);
		RaizIf.prototype.ifContent(el,cond);				
		
		RaizIf.prototype.ifUrl(el,cond);
		RaizIf.prototype.IfComponent(el,cond);
		RaizIf.prototype.ifstyle(el,cond);
		RaizIf.prototype.ifClass(el,cond);
		RaizIf.prototype.ifAttr(el,cond);

		var returns = RaizIf.prototype.ifVisible(virtualEl,cond,gost);

		// console.log(4);
		if(returns === true){
			// virtualEl.raiz.if.initialized = undefined;

			 // return;
		}
	}



	/*setTimeout(function(id,el,gost){
		RaizIf.prototype.monitor(id,el,gost);
	},300,id,el,gost);*/
}


RaizIf.prototype.ifVisible = function(el,bool,gost){

	if( el.getAttribute('raiz-if-true-show') == null 
		&& el.getAttribute('raiz-if-true-hide') == null 
		&& el.getAttribute('raiz-if-false-hide') == null 
		&& el.getAttribute('raiz-if-false-show') == null 
	)return false;

		// console.log(bool);

	if(bool !== false && bool !== null){

		if(gost.parentNode)
		gost.parentNode.insertBefore(el, gost);
		gost.parentNode.removeChild(gost);
		return true;
	}else{
		try{

		el.parentNode.insertBefore(gost,el.nextSibling);	
		el.parentNode.removeChild(el);
		}catch(e){

		}
	}
	return false;
}


RaizIf.prototype.ifJs = function(el,bool){

	if( el.getAttribute('raiz-if-true-js') == null 
		&& el.getAttribute('raiz-if-false-js') == null
		)
		return false;

	if(bool !== false && bool !== null){
			
		if(el.getAttribute('raiz-if-true-js') == null)return false;

		var ifTrue = el.getAttribute('raiz-if-true-js');
		eval(ifTrue);	
		return true;
	}else{
		if(el.getAttribute('raiz-if-false-js') == null)return false;
		
		var ifFalse = el.getAttribute('raiz-if-false-js');
		eval(ifFalse);
		return false;	
		
	}
}

RaizIf.prototype.ifstyle = function(el,bool){

	if( el.getAttribute('raiz-if-true-style') == null 
		&& el.getAttribute('raiz-if-false-style') == null
		)
		return false;

	if(bool !== false && bool !== null){


		if(el.getAttribute('raiz-if-true-style') == null)return false;


		var style = el.getAttribute('raiz-if-true-style');

		var styleArray = style.split(';');
		if(style != undefined){
			for(var keyCss in styleArray){
				var styleArrayItem = styleArray[keyCss].split(':');
			
				var cssName = styleArrayItem[0];
				var cssValue = styleArrayItem[1];
			
				if(cssValue != undefined) el.style[cssName] = cssValue;				
			}
		}
	
		return true;		
	}else{
		
		if(el.getAttribute('raiz-if-false-style') == null)return false;
		
		var style = el.getAttribute('raiz-if-false-style');

		var styleArray = style.split(';');
		if(style != undefined){
			for(var keyCss in styleArray){
				var styleArrayItem = styleArray[keyCss].split(':');
			
				var cssName = styleArrayItem[0];
				var cssValue = styleArrayItem[1];
			
				if(cssValue != undefined) el.style[cssName] = cssValue;				
			}
		}

		return true;	
	}
}



RaizIf.prototype.ifClass = function(el,bool){

	if( el.getAttribute('raiz-if-true-class') == null 
		&& el.getAttribute('raiz-if-false-class') == null
		// && el.getAttribute('raiz-if-'+bool+'-class') == null
		)
		return false;

	var style = el.classList.value;
		var styleArray = style.split(' ');
		for(var key in styleArray){
			var classInd = styleArray[key];
			if(classInd !== '')
			el.classList.remove(classInd);
		}

	if(bool !== false && bool !== null){

		if(el.getAttribute('raiz-if-true-class') == null)return false;

		

		var style = el.getAttribute('raiz-if-true-class');
		var styleArray = style.split(' ');
		for(var key in styleArray){
			var classInd = styleArray[key];
			if(classInd !== '')
			el.classList.add(classInd);
		}

		return true;		
	}else {
		
		if(el.getAttribute('raiz-if-false-class') == null)return false;		
		
		
		
		var style = el.getAttribute('raiz-if-false-class');
		var styleArray = style.split(' ');
		for(var key in styleArray){
			var classInd = styleArray[key];
			if(classInd !== '')
			el.classList.add(classInd);
		}

		return true;
	}
}



RaizIf.prototype.ifAttr = function(el,bool){

	if( el.getAttribute('raiz-if-true-attr') == null 
		&& el.getAttribute('raiz-if-false-attr') == null
		// && el.getAttribute('raiz-if-'+bool+'-attr') == null
		)
		return false;

	if(bool !== false && bool !== null){


		if(el.getAttribute('raiz-if-true-attr') == null)return false;


		var attr = el.getAttribute('raiz-if-true-attr');

		var attrArray = attr.split(';');
		if(attr != undefined){
			for(var keyCss in attrArray){
				var attrArrayItem = attrArray[keyCss].split(':');
			
				var cssName = attrArrayItem[0];
				var cssValue = attrArrayItem[1] || '';
				

				if(cssName.replace(/\s/g,'') == '')continue;

				if(cssValue != undefined ){					
					if(el) el.setAttribute(cssName,cssValue);				
				}
			}
		}
	
		return true;		
	}else {
		
		if(el.getAttribute('raiz-if-false-attr') == null)return false;
		
		var attr = el.getAttribute('raiz-if-false-attr');

		var attrArray = attr.split(';');
		if(attr != undefined){
			for(var keyCss in attrArray){
				var attrArrayItem = attrArray[keyCss].split(':');
			
				var cssName = attrArrayItem[0];
				var cssValue = attrArrayItem[1] || '';
				
				if(cssName.replace(/\s/g,'') == '')continue;
				
				if(cssValue != undefined)
					if(el)
					el.setAttribute(cssName,cssValue);				
			}
		}

		return true;	
	}
}



RaizIf.prototype.ifUrl = function(el,bool){

	if( el.getAttribute('raiz-if-true-url') == null 
		&& el.getAttribute('raiz-if-false-url') == null
		// && el.getAttribute('raiz-if-'+bool+'-url') == null
		)
		return false;

	if(bool !== false && bool !== null){

		if(el.getAttribute('raiz-if-true-url') == null)return false;

		var ifTrue = el.getAttribute('raiz-if-true-url');

		raiz$f._ajax({
			url:ifTrue,
			method:'get',
			success:function(response){
				el.html(response);
				// el.innerHTML = response;	
			}
		});

		
		return true;		
	}else{
		if(el.getAttribute('raiz-if-false-url') == null)return false;
		if(ifFalse == undefined){
			el.html('');
			return;
		}
		var ifFalse = el.getAttribute('raiz-if-false-url');
		raiz$f._ajax({
			url:ifFalse,
			method:'get',
			success:function(response){
				el.html(response);
				// el.innerHTML = response;	
			}
		});
	}
}



RaizIf.prototype.ifContent = function(el,bool){

	if( el.getAttribute('raiz-if-true-content') == null 
		&& el.getAttribute('raiz-if-false-content') == null
		// && el.getAttribute('raiz-if-'+bool+'-content') == null
		)
		return false;

	if(bool !== false && bool !== null){

		if(el.getAttribute('raiz-if-true-content') == null)return false;

		var ifTrue = el.getAttribute('raiz-if-true-content');
		el.innerHTML = ifTrue;
		return true;		
	}else {
		if(el.getAttribute('raiz-if-false-content') == null)return false;
		
		var ifFalse = el.getAttribute('raiz-if-false-content');
		el.innerHTML = ifFalse;

	}
}



RaizIf.prototype.IfComponent = function(el,bool){

	if( el.getAttribute('raiz-if-true-component') == null 
		&& el.getAttribute('raiz-if-false-component') == null
		// && el.getAttribute('raiz-if-'+bool+'-component') == null
		)
		return false;
	
	if(bool !== false && bool !== null){

		if(el.getAttribute('raiz-if-true-component') == null)return false;

		var ifTrue = el.getAttribute('raiz-if-true-component');
		el.innerHTML = '<raiz-component name="'+ifTrue+'"></raiz-component>';
		return true;		
	}else{
		
		if(el.getAttribute('raiz-if-false-component') == null)return false;
		
		var ifFalse = el.getAttribute('raiz-if-false-component');
		if(ifFalse.replace(/\s/g,'') == ''){
			el.innerHTML = '';
			return;
		}
		el.innerHTML = '<raiz-component name="'+ifFalse+'"></raiz-component>';
		return true;		
	}
}



var RaizFor = (function(){
	function RaizFor(){
		this.name = 'for';
		this.listed = {};

		this.timeDefault = 500;

		var style = document.createElement('style');
		// style.innerHTML='[raiz-for],[raiz-for-hide]{display:none !important}';
		style.innerHTML='[raiz-for],[raiz-for-init]{display:none !important}';
		document.querySelector('head').appendChild(style);
		
		raiz$f._event(window,'load',function(){		
			// RaizComponents.prototype.init();	
		// });
		
		// raiz$f._event(document,'load',function(){
			// setTimeout(function(){				
				RaizFor.prototype.init();				
			// },3000);

		});
	}
	return RaizFor;
})();
raiz.attachModule(RaizFor);

RaizFor.elementsList = [];

RaizFor.prototype.init = function(){
	// console.log('===');
	// RaizFor.prototype.monitorRaizFor();
	RaizFor.prototype.checkNewElemensInDom();
	RaizFor.prototype.monitorRemove();
	/*raiz$f._timeFrame(function(){
		RaizFor.prototype.checkNewElemensInDom();		
	});*/
}

RaizFor.prototype.checkComponentInitialized = function(el){	
	
	if(el === null)
		return null;
	if( el.getAttribute('initialized') !== 'true'){	
		if(el.nodeName.toLowerCase() === 'raiz-component') return false;
		if(el.tagName === 'HTML') return null;
		return RaizFor.prototype.checkComponentInitialized(el.parentNode);
	}else{			
		if( el.getAttribute('initialized') === 'true')
			return true				
	}	
}




RaizFor.prototype.checkNewElemensInDom = function(){
	/*var countElements = document.getElementsByTagName('*').length;
	if(countElements != RaizFor.prototype.checkNewElemensInDom.countElements){
		RaizFor.prototype.checkNewElemensInDom.countElements = countElements;
		RaizFor.prototype.monitorRaizFor();
	}
*/
	var sizeDocument = document.querySelector('html').innerHTML.length;
	// var sizeDocument = document.querySelector('html').textContent.length;
	if(sizeDocument != RaizFor.prototype.checkNewElemensInDom.sizeDocument){
		
		RaizFor.prototype.checkNewElemensInDom.sizeDocument = sizeDocument;
		RaizFor.prototype.monitorRaizFor();
	}
	
	// RaizFor.prototype.monitorElements();
	/*window.requestAnimationFrame(function(){          
		RaizFor.prototype.checkNewElemensInDom();
    });*/

	setTimeout(function(){
		RaizFor.prototype.checkNewElemensInDom();
	},2000);
}



RaizFor.prototype.monitorRaizFor = function(){

	
	if(typeof document.body === undefined){

		setTimeout(function(){
			RaizFor.prototype.monitorRaizFor();
		},1000);

		return;
	}

	var raizForAll = document.querySelectorAll('[raiz-for]');


	if(RaizFor.prototype.listFor == undefined)
		RaizFor.prototype.listFor = {};

	// console.log(raizForAll.length);

	for (var i = 0; i < raizForAll.length; i++) {
		var element = raizForAll[i];

		

		var checkComponentInitialized = RaizFor.prototype.checkComponentInitialized(element);
		if(checkComponentInitialized === false ){
			setTimeout(function(){
				RaizFor.prototype.monitorRaizFor();
			},2000);
			return;
			continue;
		}

		// continue;
		var gost = document.createTextNode('');
		
		// if(element.html !== null ){
			/*setTimeout(function(){
				RaizFor.prototype.monitorRaizFor();
			},0);
			return;*/
			element.htmlInitial = element.html;
			// element.htmlInitial = element.innerHTML;
		// }
		
		
		

		gost.contentHtml = element.innerHTML;

		element.parentNode.insertBefore(gost, element.nextSibling);		
		

		

		var dataFor = element.getAttribute('raiz-for');
		var dataForArray = dataFor.split(' in ');
		
		var preKey = dataForArray[0];
		var preValue = dataForArray[1];

		preKey = preKey.trim();
		var classEvent = raiz.getClassEvent(gost.parentNode);						
		preValue = preValue.replace('this.',classEvent+'.');
		preValue = preValue.replace('self.',classEvent+'.');
		
		var match = preValue.match(/parent\./g);
		if(match !== null){
			var parentString = '';
			for (var a = 0; a < match.length; a++) {				
				parentString += '.parentNode';
			}			
			preValue = preValue.replace(/parent\.(.*)parent\./g, 'eval(raiz.getClassEvent('+classEvent+'.container'+parentString+')).');
			preValue = preValue.replace(/parent\./g, 'eval(raiz.getClassEvent('+classEvent+'.container'+parentString+')).');
		}



 	
 
		gost.preKey = preKey;
		gost.preValue = preValue;
		gost.index = i+(new Date).getTime();

		element.setAttribute('raiz-for-init','');
		element.removeAttribute('raiz-for');
		element.removeAttribute('raiz-controller');
		element.removeAttribute('initialized');

		gost.clone = element;
		// gost.clone.removeAttribute('raiz-for');

		setTimeout(function(element){

			element.parentNode.removeChild(element);
		},2000,element);

		RaizFor.prototype.loopRaizFor(gost,preValue,function(gost){
			// setTimeout(function(gost){
				// gost.clone.removeAttribute('raiz-for-init');
			// },3000,gost);
		});
	}
	
}

RaizFor.prototype.monitorRemove = function(){

	for(var key in RaizFor.elementsList){
		var obj = RaizFor.elementsList[key].obj;
		var element = RaizFor.elementsList[key].element;
		var remove = false;

		eval('try{if( typeof  '+obj+' === "undefined" || document.contains(element) === false )remove = true;}catch(e){}');
		// eval('try{if( document.contains(element) === false )remove = true;}catch(e){}');
		// console.log('try{if( typeof  '+obj+' === "undefined" )remove = true;}catch(e){}');
		// eval('try{if( typeof  '+obj+' === "undefined" )remove = true;}catch(e){}');
		if(remove == true){
			if(element.parentNode)
				element.parentNode.removeChild(element);
			delete RaizFor.elementsList[key];
		}

	}


	// window.requestAnimationFrame(function(){
	setTimeout(function(){
		RaizFor.prototype.monitorRemove();
	},1000);
	// });
}

RaizFor.prototype.customStringify = function(v){
	
	// var customStringify = function (v) {
	  var cache = new Set();
	  return JSON.stringify(v, function (key, value) {
	    if (typeof value === 'object' && value !== null) {
	      if (cache.has(value)) {
	        // Circular reference found
	        try {
	          // If this value does not reference a parent it can be deduped
	         return JSON.parse(JSON.stringify(value));
	        }
	        catch (err) {
	          // discard key if value cannot be deduped
	         return;
	        }
	      }
	      // Store value in our set
	      cache.add(value);
	    }
	    return value;
	  });
	// };

}


RaizFor.prototype.loopRaizFor = function(gost,preValue,callback){

	
	var element = gost.clone;

	try{
		eval('try{var variable = '+preValue+';}catch(e){var variable = false;}');
	}catch(e){
		console.error('raiz-for(error on JSON string): ',preValue);
		return false;
	}


	

	if(variable === null || variable === undefined || variable === false ){
		// window.requestAnimationFrame(function(){
		setTimeout(function(gost,preValue,callback){
			RaizFor.prototype.loopRaizFor(gost,preValue,callback);
		},2000,gost,preValue,callback);
		// });
		return;
	}


	

	// console.log(gost.preKey, JSON.stringify(variable) );
	
	// try{

		
		

		

		var variableJSON = RaizFor.prototype.customStringify(variable);
		// var variableJSON = JSON.stringify(variable);


	/*}catch(e){

		setTimeout(function(gost,preValue,callback){
			RaizFor.prototype.loopRaizFor(gost,preValue,callback);
		},2000,gost,preValue,callback);
		// });
		return;
	}

	*/


	var hash = raiz$f._md5(variableJSON);

	var indexTest = 0;
	for(var key in variable){
		variable[key].index = indexTest;
		indexTest++;
	}


	// setTimeout(function(){
		
		// RaizFor.prototype.monitorRemove();
	// },3000);
	// if(typeof gost.hash !== 'undefined')
	// if(gost.hash === hash){		
	// if(typeof gost.count !== 'undefined')
	
	// console.log(variable,gost.count , indexTest);

	

	if(gost.count === indexTest && gost.hash === hash){		
		// window.requestAnimationFrame(function(){
		setTimeout(function(gost,preValue,callback){
			RaizFor.prototype.loopRaizFor(gost,preValue,callback);

		},2000,gost,preValue,callback);
		// });
		return;
	}


	

	// console.log(variable,gost.count , indexTest,gost.hash , hash);




	if(typeof gost.variable !== 'undefined'){
		

		if(indexTest > gost.count){
			var index = 0;
			var variableList = [];



			for(var keyPreFor in variable){	
				var unitVariable = variable[keyPreFor];

				variableList[keyPreFor] = unitVariable;
				// setTimeout(function(gost,keyPreFor,unitVariable,keyPreFor,variableList){

					RaizFor.prototype.addItem(gost,keyPreFor,unitVariable,keyPreFor,variableList);
				// },0,gost,keyPreFor,unitVariable,keyPreFor,variableList);

				index++;
			}
		}
		


	}else{

		// gost.innerHTML = '2';
		// console.log(gost);

		var index = 0;
		var variableList = [];



		for(var keyPreFor in variable){	
			var unitVariable = variable[keyPreFor];

			variableList[keyPreFor] = unitVariable;
			RaizFor.prototype.addItem(gost,keyPreFor,unitVariable,keyPreFor,variableList);

			index++;
		}
		
	}
			
	gost.hash = hash;
	gost.count = indexTest;
	gost.variable = variableList;
	

	if(callback)callback(gost);

	// window.requestAnimationFrame(function(){                        
	setTimeout(function(gost,preValue,callback){
		RaizFor.prototype.loopRaizFor(gost,preValue,callback);
	},1000,gost,preValue,callback);
    // });    
}




RaizFor.prototype.addItem = function(gost,index,unitVariable,keyPreFor,variableList){

	

	var element = gost.clone;
	var cln = element.cloneNode(true);	



	var preKey = gost.preKey;
	var preValue = gost.preValue;
	var identification = gost.index;

	var html = element.htmlInitial;


	// console.log(preKey+'_'+preValue+'_'+identification);

	if(typeof html === 'undefined'){
		var html = cln.innerHTML;
	}

		html = String(html).replace( new RegExp(preKey,"gm") ,'('+preValue+')'+'[\''+index+'\']');	

		cln.innerHTML = html;
		// console.log(html,typeof html);


	for (var i = 0; i < cln.attributes.length; i++) {
		var attr = cln.attributes[i];
		var name = attr.name;
		var value = attr.value;

		value = String(value).replace( new RegExp(preKey,"gm") ,'('+preValue+')'+'[\''+index+'\']');	

		cln.attributes[i].value = value;

	}


	cln.removeAttribute('raiz-for-init');

	variableList[index].initialized = preKey+'_'+preValue+'_'+identification;


		
	if(typeof RaizFor.elementsList[preKey+'_'+preValue+'_'+identification+'_'+index] !== 'undefined'){

		return;
	}

	RaizFor.elementsList[preKey+'_'+preValue+'_'+identification+'_'+index] = {
		obj:preValue+'["'+index+'"]',
		element:cln
	};

	
	
	// gost.textContent = 2;
	gost.parentNode.insertBefore(cln, gost);
	

}
var RaizEvents = (function(){
	function RaizEvents(){
		this.name = 'events';

		raiz$f._event(window,'load',function(){		
		

			
			RaizEvents.prototype.init();	
			
			

		});

	}

	

	return RaizEvents;
})();
raiz.attachModule(RaizEvents);

RaizEvents.prototype.checkNewElemensInDom = function(){
/*	var countElements = document.getElementsByTagName('*').length;
	if(countElements != RaizEvents.prototype.checkNewElemensInDom.countElements){
		RaizEvents.prototype.checkNewElemensInDom.countElements = countElements;
		RaizEvents.prototype.monitorElements();
	}*/


	var sizeDocument = document.querySelector('html').innerHTML.length;
	// var sizeDocument = document.querySelector('html').textContent.length;
	if(sizeDocument != RaizEvents.prototype.checkNewElemensInDom.sizeDocument){
		
		RaizEvents.prototype.checkNewElemensInDom.sizeDocument = sizeDocument;
		RaizEvents.prototype.monitorElements();
	}
	
	// RaizEvents.prototype.monitorElements();

	setTimeout(function(){
		RaizEvents.prototype.checkNewElemensInDom();
	},500);
}


RaizEvents.prototype.init = function(){	

	RaizEvents.prototype.checkNewElemensInDom();
	// RaizEvents.prototype.monitorElements();
	/*raiz$f._timeFrame(function(){
		RaizEvents.prototype.checkNewElemensInDom();
	});*/
}


RaizEvents.prototype.monitorElements = function(){

	

	var vdomIdAll = document.querySelectorAll('[raiz-controller]');
	if(vdomIdAll.length > 0)
	for (var i = 0; i < vdomIdAll.length; i++) {
		var container = vdomIdAll[i];
		var controller = container.getAttribute('raiz-controller');
		
		
		// if( String(container.tagName).toLowerCase() ==  'raiz-component' 
		// || container.getAttribute('raiz-component') != undefined )
			// return false;

			


		if(String(controller).replace(/ /g,'') == '')
			continue;



		eval("try{var currentController =  "+controller+";}catch(e){}");

		if(currentController === undefined) continue;	

		if(currentController.container == null)
		currentController.container = container;

		// console.log(controller);

		var parameters = {
			controller:currentController
		};


		
			
		// setTimeout(function(currentController){
			RaizEssentials.prototype.filterMethodsEvents(currentController,parameters,function(parameters){
				var controller = parameters.controller;
				// console.log(parameters);
				var container = controller.container;

				

				if(controller.construct && container.initializedConstruct != true){
					container.initializedConstruct = true;

					/*if(typeof controller.parameters !== 'undefined'){

						var nameObj = controller.parameters.name;
						nameObj = nameObj.split('/');
						var join = '';
						var variableJoin = '';
						var index2 = 0;	
						for(var key in nameObj){

							var variable = nameObj[key];

							if(index2 == 0){
								join += '$'+variable;
								variableJoin += ''+variable;
							}else{
								join += '.$'+variable;
								variableJoin += '_'+variable;
							}

				
							eval('if(typeof '+join+' === "undefined")'+join+' = {};');
			

							index2++;
						}

					}*/

					// console.log( controller );

					// raiz$f._timeFrame(function(){
					setTimeout(function(controller,container){	


						// controller.container.innerHTML = 3;

							// console.log(container);
						// window.requestAnimationFrame(function(){  					
							controller.construct(container);

							// console.log(controller,container);

						// });
						// },600,controller,container);
						},1500,controller,container);
				}
			});
		// },1000,currentController);

	}



	/*setTimeout(function(){
		RaizComponents.prototype.monitorElements();
	},100);*/
}
// repositorio de componentes em execução
var RaizComponents = (function(){
    function RaizComponents(){
        this.name = 'components';
        
        this.loaded = {};

        this.config = {
            dir:''
        };

        this.container = null;
        this.count = 0;
        this.delay = 50;

        var style = document.createElement('style');
        var stylecss = '';
        stylecss += 'raiz-component{visibility:hidden;max-height:0px}raiz-component[disabled]{display:none}';
        stylecss += '.raizloading_component{position: absolute; width: 100%; height: 55px; display: block; }.raizloading_component::before{content: " "; top: 50%; left: 50%; position: absolute; border-radius: 100%; display: block; padding:10px; margin:auto; background-color: transparent;  transform: scale(1) rotate(0deg) translateX(-50%) translateY(-50%); transform-origin: 0% 0%; animation: RaizLoading_component 1s ; transition: 300ms; animation-timing-function: linear; animation-iteration-count: infinite; border-right: 5px solid #FF5722; border-bottom: 5px solid #0027ff; border-top: 5px solid #FFEB3B; border-left: 5px solid #04ff04;  } ';
        stylecss += '@keyframes RaizLoading_component {to {transform: scale(1) rotate(359deg) translateX(-50%) translateY(-50%); } }';

        style.innerHTML= stylecss;
        document.querySelector('head').appendChild(style);

        raiz$f._event(window,'load',function(){     
            // RaizComponents.prototype.init();    
        });

    }

    return RaizComponents;
})();
raiz.attachModule(RaizComponents);


// 
RaizComponents.prototype.init = function(){ 
    // RaizComponents.prototype.monitorElements();
    RaizComponents.prototype.checkNewElemensInDom();
}




// 
RaizComponents.prototype.checkNewElemensInDom = function(){
    // var sizeDocument = document.querySelector('html').textContent.length;
    var sizeDocument = document.querySelector('html').innerHTML.length;

    // console.log(sizeDocument);
    if(sizeDocument != RaizComponents.prototype.checkNewElemensInDom.sizeDocument){     
        RaizComponents.prototype.checkNewElemensInDom.sizeDocument = sizeDocument;
        RaizComponents.prototype.monitorElements();
    }

    setTimeout(function(){
        RaizComponents.prototype.checkNewElemensInDom();
    },raiz.components.delay);
}



// 
RaizComponents.prototype.monitorElements = function(){

    

    if(typeof document.body === undefined){

        setTimeout(function(){
            RaizComponents.prototype.monitorElements();
        },100);

        return;
    }

    var RaizComponentsAll = document.querySelectorAll('[raiz-component]:not([disabled]):not([initialized]),raiz-component:not([disabled]):not([initialized]),raiz-component-package:not([disabled]):not([initialized])');

    for (var i = 0; i < RaizComponentsAll.length; i++) {
        var element = RaizComponentsAll[i];

        if(typeof element.raiz === 'undefined') element.raiz = {};
        if(typeof element.raiz.component === 'undefined') element.raiz.component = {};
        
        if( element.raiz.component.initialized === true ) continue;
        element.raiz.component.initialized = true;

        if(typeof element.html === 'undefined')
        element.html = element.innerHTML;
        

        // if(element.getAttribute('raiz-for')) continue;

        RaizComponents.prototype.loadComponent(element);

    }

}



// 
RaizComponents.prototype.loadComponent = function(element){
    var componentPath = element.getAttribute('name') || element.getAttribute('raiz-component') ;
    var componentPathOriginal = componentPath;

    

    if( componentPath.substr( componentPath.length-1 ) === '/' )
        componentPath = componentPath.substr( 0,componentPath.length-1 );
    
    if(componentPath.indexOf('::') != -1 ){
        var componentPathArray = componentPath.split('::');
    }else{
        var componentPathArray = ['app/components',componentPath];
    }
    var componentDir = componentPathArray[0];
    var componentName = componentPathArray[1] || null;

    // ... loading component
    


    if(componentDir == '@raiz'){
        componentDir = 'https://raiz.wallrio.com/component';
    }else if(componentDir == '@raiz-github'){
        componentDir = 'https://rawgit.com/raizjs/components/master';
    }

    var componentNameComplete = componentName;
    // altera a variavel do diretorio do componente baseado na lista de repositorio definido no script raiz-settings
    if(componentDir.substr(0,1)=='$'){
        var repositoryReference = componentDir.substr(1);
        
        if(raiz.settings.data.components.repositories === undefined) return false;
            
        
        if(raiz.settings.data.components.repositories[repositoryReference] == undefined){
            console.log('Raiz-components: reference of repository not found ['+repositoryReference+']');
            return false;
        }
        // if(raiz.settings.data.components.repositories === undefined) return false;
        componentDir = raiz.settings.data.components.repositories[repositoryReference];

    }


    var componentVersion = '';
    if( componentName.indexOf('#')!== -1 ){
        var componentPathArray = componentName.split('#');
        componentName = componentPathArray[0];
        componentVersion = componentPathArray[1];
        componentDir = componentDir+'/'+componentName+'/version/'+componentVersion;
        var urlPackage = '/package.html';
    }else{

        var urlPackage = '/'+componentName+'/package.html';
    }

    urlPackage = componentDir+String('/'+urlPackage).replace('//','/');


    var nameSingle = componentName.replace(/\/\//g,'/');
    nameSingle = nameSingle.replace(/\//g,'_');

    var type = 'local';
    if(element.tagName === 'LINK') type = 'link';

    var dataComponent = {
        name:componentName,
        path:componentPath,
        dir:componentDir+'/'+componentName,
        version:componentVersion,
        package:urlPackage,
        single:nameSingle,
        element:element,
        id:element.getAttribute('id'),
        type:type,
    }

    var countComponents = Object.keys(raiz.components.loaded).length;

    // element.setAttribute('raiz-index',countComponents);

    dataComponent.index = countComponents;
    dataComponent.controlername = 'Controller_'+nameSingle+'_'+countComponents;
    
    raiz.components.loaded[countComponents] = dataComponent;




    var loading = element.getAttribute('loading');
    if(loading !== null){   
        var elementLoading = document.createElement('div');
        elementLoading.innerHTML = '';
        elementLoading.classList.add('raizloading_component');
        elementLoading.id='raiz-component-loading-'+nameSingle;
        element.parentNode.insertBefore(elementLoading, element);
    }
    


    

    RaizComponents.prototype.getPackage(dataComponent);

}




// 
RaizComponents.prototype.getPackage = function(parameters){

    RaizComponents.prototype.getRemovePackage(parameters);
}



// 
RaizComponents.prototype.getRemovePackage = function(parameters){

    var name = parameters.name;
    var element = parameters.element;
    var urlPackage = parameters.package;

    urlPackage = urlPackage + '?' +(new Date).getTime()
    


    raiz$._ajax({
        url:urlPackage,
        method:'get',
        success:function(response){ 

            RaizComponents.prototype.FilterResponse(parameters,response,function(parameters,contentPackage){

                RaizComponents.prototype.mountComponent(parameters,contentPackage);

            });

            // console.log(response);
            // RaizComponents.prototype.downloadedComponents[componentNameComplete].data = response;

        },
        error:function(response){
            console.log('Component not Found: ['+name+'] - ['+urlPackage+'] application sequence stopped');
            /*setTimeout(function(callbackError){
                if(callbackError)callbackError();
            },400,callbackError);*/
        }
    });

}



// 
RaizComponents.prototype.FilterResponse = function(parameters,response,callback){

    
    RaizComponents.prototype.getImport(parameters,response,function(parameters,response){

        var name = parameters.name;
        var path = parameters.path;
        var element = parameters.element;
        var urlPackage = parameters.package;
        var single = parameters.single;
        var controlername = parameters.controlername;


        var dir = urlPackage.substr(0,urlPackage.lastIndexOf('/'))+'';          
        response = response.replace(/{package-url}/g,dir);
        response = response.replace(/{package-path}/g,path);
        response = String(response).replace(/{package-name}/g,name);

        
        response = response.replace(/{package}/g,single);

        
        if(callback)callback(parameters,response);

    });
    // return response;
}



// 
RaizComponents.prototype.getImport = function(parameters,contentPackage,callback){

    var objImports = contentPackage.match(/import\[(.*)\]\;?/g);

    if(objImports === null){
        if(callback)callback(parameters,contentPackage);
        return;
    }

    func = function(parameters,obj,responseIn,count,callback){
        if(obj[count] === undefined){
            if(callback)callback(parameters,obj,responseIn);
            return;
        }

        var contentIndex = obj[count];
        contentIndex = contentIndex.replace('import[','');
        contentIndex = contentIndex.replace('];','');
        contentIndex = contentIndex.replace(']','');



        var contentIndexUrl = contentIndex.replace(/^["|'](.*)["|']$/, '$1');

        var urlPackage = parameters.dir;
        // var dir = urlPackage.substr(0,urlPackage.lastIndexOf('/'))+'';   
        // console.log(urlPackage);

        var rand = (new Date).getTime();

        raiz$f._ajax({
            url:urlPackage+'/'+contentIndexUrl+'?'+rand,
            success:function(result){

                var regx =  new RegExp('import\\['+contentIndex+'\\]\;?', "");
                var response2 = responseIn.replace(regx,result);
    
                count++;
                // window.requestAnimationFrame(function(){  
                setTimeout(function(parameters,obj,response2,count,callback){
                    func(parameters,obj,response2,count,callback);
                },20,parameters,obj,response2,count,callback);
                // });
                
            }
        });
    }


    func(parameters,objImports,contentPackage,0,function(parameters,obj,contentPackage){


/*      var dir = urlPackage.substr(0,urlPackage.lastIndexOf('/'))+'';          
        responseAdjust = responseAdjust.replace(/{package-url}/g,dir);
        responseAdjust = responseAdjust.replace(/{package-repository}/g,repository);
        responseAdjust = String(responseAdjust).replace(/{package-name}/g,componentName);

        var packageName = componentName.replace(/\/\//g,'/');
        packageName = packageName.replace(/\//g,'_');
        responseAdjust = responseAdjust.replace(/{package}/g,packageName);
*/
        // console.log(responseAdjust);
        // calbFunc(packageName,countComponents,parameters,element,componentName,componentVersion,element,responseAdjust,body,callback);
        if(callback)callback(parameters,contentPackage);

    });

}

// 
RaizComponents.prototype.mountComponent = function(parameters,contentPackage){
    // setTimeout(function(){
        RaizComponents.prototype.strapContentPackage(parameters,contentPackage);
    // },000);
}


// 
RaizComponents.prototype.strapContentPackage = function(parameters,contentPackage){

    var element = parameters.element;
    var componentName = parameters.name;
    var single = parameters.single;
    var controlername = parameters.controlername;

    var responseElement = document.createElement('div');
    responseElement.innerHTML = contentPackage;

    var style = responseElement.querySelector('style');
    var script = responseElement.querySelector('script[type="text/javascript"]');
    var template = responseElement.querySelector('script[type="text/html"]');



    // if(template == undefined){
        // template = document.createElement('div');
    // }

    if(template !== null){
    // console.log(template);
        var componentHtml = template.innerHTML;

        componentHtml = componentHtml.replace(/self\./ig,controlername+'.');
        componentHtml = componentHtml.replace(/this\./ig,controlername+'.');
        
        // componentHtml = componentHtml.replace(/{{/ig,'[[');
        // componentHtml = componentHtml.replace(/}}/ig,']]');
    }
    // console.log(componentHtml);

    if(element.tagName === 'LINK'){ 
    }else{
        // setTimeout(function(element,componentHtml){
            if(template !== null){

                // var testData = document.createElement('div');
                // testData.innerHTML = componentHtml;

                element.innerHTML = componentHtml;

               
            }
        // },200,element,componentHtml);
    }

    setTimeout(function(element){
        element.setAttribute('initialized','true');
    },500,element);

    setTimeout(function(parameters,script,style,contentPackage){
        RaizComponents.prototype.appendAssets(parameters,script,style,contentPackage);
    },300,parameters,script,style,contentPackage);


}


RaizComponents.prototype.appended = {
    js:[],
    css:[],
    linkmeta:[],
    style:[],
};

RaizComponents.prototype.appendAssets = function(parameters,scriptElement,styleElement,contentPackage){
    
    

    var element = parameters.element;
    var packageName = parameters.name;
    var single = parameters.single;
    var controlername = parameters.controlername;

    element.classList.add(single);

    if(styleElement !== null){      

        // executa uma unica vez
        if(typeof RaizComponents.prototype.appended.style[single] === 'undefined' ){
            RaizComponents.prototype.appended.style[single] = styleElement;

            var style = document.createElement('style');
            style.setAttribute('package-name',packageName); 
            var styleHtml = styleElement.innerHTML;
            styleHtml = styleHtml.replace(/self\./ig,controlername+'.');
            styleHtml = styleHtml.replace(/this\./ig,controlername+'.');
            style.innerHTML = styleHtml;
            document.querySelector('head').appendChild(style);
        }
    }

    
    // console.log(parameters);

    if(scriptElement === null){
        scriptElement = document.createElement('script');
        scriptElement.innerHTML = 'var Controller = new (function(){var self = this; this.construct = function(){}; return this; })(); ';

    }



    

    if(scriptElement !== null){
        var scriptContent = scriptElement.innerHTML;
        scriptContent = scriptContent.replace(/var Controller/g,'var '+controlername);

        var script = document.createElement('script');
        script.setAttribute('package-name',packageName);
        script.setAttribute('type',String(scriptElement.type).toLowerCase());
        script.innerHTML = scriptContent;
        document.querySelector('head').appendChild(script); 
        // element.appendChild(script); 

        eval('controllerCheck = typeof '+controlername+'; ');

        
        if(controllerCheck === "undefined"){

            // console.log(controlername);
            /*
            setTimeout(function(parameters,scriptElement,styleElement,contentPackage){
                RaizComponents.prototype.appendAssets(parameters,scriptElement,styleElement,contentPackage);
            },1000);

            return;
*/
            var Controller = new (function(){
                var self = this;

                self.construct = function(){
                }

            
                return this;
                
            }); 

            eval(controlername+' = Controller;');
        }

        // console.log(element);

        eval(controlername+'.container = element;');

        

        var props = RaizComponents.prototype.setProps(element);
        parameters.props = props;
        eval(controlername+'.props = props;');

        eval('parameters.controller = '+controlername+';');
        
        eval(controlername+'.html = element.html;');
        eval(controlername+'.parameters = parameters;');
            

        
        
        /*if(parameters.element.getAttribute('data-id') === 'plugins'){

            console.log(parameters);
            
        }*/

        // monitor of properties
        var monitorProps = function(parameters){
            var element = parameters.element;
            var controlername = parameters.controlername;
            var props = RaizComponents.prototype.setProps(element);
            parameters.props = props;

                // console.log(parameters,props);
            /*if(parameters.element.getAttribute('data-id') === 'plugins'){

                console.log(parameters,props);
            }*/
                // console.log(parameters,props);
            
            eval(controlername+'.props = props;');

            setTimeout(function(parameters){
                monitorProps(parameters);
            },1000,parameters);
        }
        monitorProps(parameters,element);


        // setTimeout(function(element,parameters){
            // RaizComponents.prototype.finishLoad(element,parameters);        
        // },1000,element,parameters);
        

        RaizComponents.prototype.defineVariableComponent(parameters,function(parameters){
            var controlername = parameters.controlername;
            var element = parameters.element;
            

            

            
            // a execução do método construct e criação das propriedades do controller 
            // serão realizadas quando for atribuido o atributo 'raiz-controller' do elemento
            // a função responsavel está no arquivo raiz-event.js
            

            RaizEssentials.prototype.filterMethodsEvents(parameters.controller,parameters,function(parameters){

      
                // var element = parameters.element;
                // var controller = parameters.controller;

                // setTimeout(function(element,controlername){
                    element.setAttribute('raiz-controller',controlername);
                    // element.setAttribute('raiz-filter-init','true');
                // },1000,element,controlername);
                    
                    // console.log(controlername);
                    

                // setTimeout(function(parameters){
                    // RaizComponents.prototype.loadController(parameters);
                // },1000,parameters);

                // setTimeout(function(element,parameters){
                    RaizComponents.prototype.finishLoad(element,parameters);        
                // },500,element,parameters);
            });



        });

        



        var monitorObject = function(parameters,element,controlername){

            var object = parameters.object;
            var name = parameters.name;
            
            
            eval('try{obj = '+object+';}catch(e){}');

            if(typeof obj === "undefined" ){
                name = name.replace(/\//,'.$');
                eval('obj = $'+name+';');
            }


            /*if(typeof obj === 'null'){
                setTimeout(function(parameters,element,controlername){
                    monitorObject(parameters,element,controlername);
                },1000,parameters,element,controlername);
                return;
            }*/
                
                if(typeof obj.container === 'undefined'){

                    for(var key in obj){
                        

                        if( document.body.contains(obj[key].container) ){
                        } else{
                            RaizComponents.prototype.defineVariableComponent(parameters,null,'removed');
                            return;
                        }

                    }
                }else{
                    if( document.body.contains(obj.container) ){
                        } else{
                            RaizComponents.prototype.defineVariableComponent(parameters,null,'removed');
                            return;
                        }
                }



            setTimeout(function(parameters,element,controlername){
                monitorObject(parameters,element,controlername);
            },1000,parameters,element,controlername);
        };

            /*setTimeout(function(parameters,element,controlername){
                monitorObject(parameters,element,controlername);
            },1000,parameters,element,controlername);*/
        // monitorObject(parameters,element,controlername);

        
        


        

        

        
        // construct()
        // setTimeout(function(controlername,element){

            // remove loading element
            

            // eval('if(typeof '+controlername+'.construct !== "undefined") '+controlername+'.construct(parameters);');
        // },1000,controlername,element);


    }

}


RaizComponents.prototype.loadController = function(parameters){


    var controlername = parameters.controlername;
    var element = parameters.element;
    var controller = parameters.controller;
    var container = parameters.container;

    // console.log('==',controller);


    RaizEssentials.prototype.filterMethodsEvents(controller,parameters,function(parameters){
                var controller = parameters.controller;
                var element = parameters.element;
                // console.log(parameters);

                

                var container = controller.container;
                if(controller.construct && container.initializedConstruct != true){
                    container.initializedConstruct = true;

                    if(typeof controller.parameters !== 'undefined'){

                        var nameObj = controller.parameters.name;
                        nameObj = nameObj.split('/');
                        var join = '';
                        var variableJoin = '';
                        var index2 = 0; 
                        for(var key in nameObj){

                            var variable = nameObj[key];

                            if(index2 == 0){
                                join += '$'+variable;
                                variableJoin += ''+variable;
                            }else{
                                join += '.$'+variable;
                                variableJoin += '_'+variable;
                            }

                
                            eval('if(typeof '+join+' === "undefined")'+join+' = {};');
            

                            index2++;
                        }

                    }
            
                    setTimeout(function(controller,container){  

                        // controller.container.innerHTML = 3;

                            // console.log(container);
                        // window.requestAnimationFrame(function(){                     
                            controller.construct(container);
                        // });


                        // element.setAttribute('raiz-controller',controlername);

                        // },1000,controller,container);
                        },500,controller,container);
                }
            });


}

RaizComponents.prototype.finishLoad = function(element,parameters){

    var single = parameters.single;

    element.style['visibility'] = 'visible';
    element.style['max-height'] = '1000px';
    element.style['display'] = 'block';
    if(element.parentNode){     
            var elementLoading = element.parentNode.querySelector('#raiz-component-loading-'+single);       
            if(elementLoading)
            elementLoading.parentNode.removeChild(elementLoading);
        }

}

RaizComponents.prototype.defineVariableComponent = function(parameters,callback,status){

    
    // console.log('variable');

    var element = parameters.element;
    var packageName = parameters.name;
    var single = parameters.single;
    var controller = parameters.controller;
    var controlername = parameters.controlername;
    var indexElement = parameters.index;
    // var id = parameters.id;

    var packageNameArray = packageName.split('/');

   
   var controllerFinish = null;
    for(var key in raiz.components.loaded){
        var item = raiz.components.loaded[key];
        
        var name = item.name;
        var controller = item.controller;
        var controlername = item.controlername;
        var id = item.id;

        // console.log(item.controller,item);

        var nameArray = name.split('/');

        var parents = [];
        var index2 = 0;
        for(var key2 in raiz.components.loaded){
            var item2 = raiz.components.loaded[key2];
            if(item2.name === name){
                parents[index2] = item2.controller;
                index2++;
            }
        }

        if(controller !== undefined && parents.length > 1)
        controller.parents = parents;

        var join = '';
        var variableJoin = '';
        var index = 0;  
        for(var key in nameArray){

            var variable = nameArray[key];

            if(index == 0){
                join += '$'+variable;
                variableJoin += ''+variable;
            }else{
                join += '.$'+variable;
                variableJoin += '_'+variable;
            }

            eval('if(typeof '+join+' === "undefined")'+join+' = {};');
            // eval('if(typeof $'+variable+' === "undefined")$'+variable+' = {};');
            
            
            index++;
        }

        

        eval(' '+join+' = controller;');
        
        // console.log(join,controller);

        if(id !== null){ 
            eval(' window["$'+id+'"] = '+join+'; ');  
        }
    }



    // setTimeout(function(parameters){
        if(callback)callback(parameters);
    // },0,parameters);

    return;
    

    var join = '';
    var variableJoin = '';
    var index = 0;  
    for(var key in packageNameArray){

        var variable = packageNameArray[key];

        if(index == 0){
            join += '$'+variable;
            variableJoin += ''+variable;
        }else{
            join += '.$'+variable;
            variableJoin += '_'+variable;
        }

        // console.log('if(typeof '+join+' === "undefined")'+join+' = {};');
        eval('if(typeof '+join+' === "undefined")'+join+' = {};');
        eval('if(typeof $'+variable+' === "undefined")$'+variable+' = {};');
        
        
        index++;
    }

        

   /* var controllerCurrent = {};
    for(var key in controller){
        if(key === 'webkitStorageInfo') continue;
        controllerCurrent[key] = controller[key];
        

    }
*/

    
    // var controllerCurrent = {};

    // eval('if(typeof '+join+'==="undefined" ){'+join+' = controllerCurrent;}');
    // eval('if(typeof '+join+'!=="undefined" ){if('+join+'["parent"] === undefined)'+join+'["parent"] = [];}');
    // eval('if(typeof '+join+'!=="undefined" ){ '+join+'["parent"]['+join+'["parent"].length] = controllerCurrent; for(var key in controllerCurrent){ if (/webkitStorageInfo|webkitIndexedDB/.test(key)) continue; if('+join+'[key] === undefined)'+join+'[key] = controllerCurrent[key]; } if(id !== null && id !== ""){'+join+'["'+id+'"] = controllerCurrent; if(window["$'+id+'"] === undefined)window["$'+id+'"] = controllerCurrent;} ;}');

        
    // eval('if(typeof '+join+'!=="undefined" ){if('+join+'["parent"] === undefined)'+join+'["parent"] = [];}');
    // console.log(indexElement);

    // eval('if(typeof '+join+' !== "undefined" )console.log(111,'+join+');');

    
    // console.log(raiz.components.loaded);
    var a = 0;
    var newObj = {};
    var obCount = null;
    var listObj = [];
    var index = 0;
    for (var i = 0; i < Object.keys(raiz.components.loaded).length; i++) {
     
        var elementFor = raiz.components.loaded[i].element;

            if(packageName === raiz.components.loaded[i].name){
                
                if( raiz.components.loaded[i].type === 'link' || document.body.contains(raiz.components.loaded[i].element) ){
                
                    var controllerAdd = raiz.components.loaded[i].controller;
                    if(controllerAdd !== undefined){
                        newObj = controllerAdd;
                        if(typeof newObj.childs === 'undefined') newObj.childs = [];    

                        newObj.childs[index] = controllerAdd;
              
                        obCount = i;
                        index++;
                    }
                }
            }

    }

    /*if(listObj.length <= 2){
        newObj = listObj;
    }else{

        

        for(var key in listObj){
            
            newObj = listObj;
            newObj.childs = [];

            newObj.childs[key] = listObj[key];
        }


            
    }*/
    // console.log('==',newObj);

    // var obCount = Object.keys(newObj).length;

        var onlyone = false;
        if(Object.keys(newObj).length === 1){
            onlyone = true;
            newObj = newObj[Object.keys(newObj)[0]];
        }
        
        // console.log('--',newObj);

        // newObj = JSON.stringify(newObj);

        // continue;
        // eval(' if(typeof '+join+' !== "undefined"){ '+join+' = '+controlername+'; console.log('+join+'); } ');
        // eval('if(typeof '+join+' !== "undefined" && typeof '+join+'.container === "object" ){ '+join+' = {}; }');
        // console.log(' '+join+' = newObj;  ',newObj);
        
        // if(status === 'removed'){
            // console.log(''+join+' === {}');
            // eval(''+join+' === {}');
            // console.log(' '+join+' = newObj;  ',newObj);
        // }
        // console.log(' '+join+' = newObj;  ',newObj);


    try{
        var id = parameters.element.id || null;
    }catch(e){
        var id = null;
    }

    
        // if(element.getAttribute('name') === 'app::sections/dashboard/account/settings'){
            // console.log(element);
            // console.log(' '+join+' = newObj;');
        // }

        // console.log(' '+join+' = newObj;');
        // try{

            eval(' '+join+' = newObj;');
        /*}catch(e){
            setTimeout(function(parameters,callback,status){

                RaizComponents.prototype.defineVariableComponent(parameters,callback,status);
            },50,parameters,callback,status);            
            return;
        }*/


        // eval(' try{'+join+' = newObj;}catch(e){}  ');
        // eval('if(typeof '+join+' === "undefined" ){ '+join+' = {};  }');
        // eval('if(typeof '+join+' !== "undefined" ){ '+join+'['+join+'.length] = '+controlername+'; parameters.object = "'+join+'" ; if(id !== null && id !== ""){'+join+'["'+id+'"] = '+controlername+'; if(window["$'+id+'"] === undefined)window["$'+id+'"] = '+controlername+';} ;}');
        // eval('if(typeof '+join+' !== "undefined"  ){ '+join+'['+i+'] = newObj; parameters.object = "'+join+'" ; if(id !== null && id !== ""){'+join+'["'+id+'"] = newObj; if(window["$'+id+'"] === undefined)window["$'+id+'"] = newObj;} ;}');
        // eval('if(typeof '+join+' === "undefined" ){ '+join+' = newObj;  }');
        // eval('if(typeof '+join+' !== "undefined" ){ '+join+'['+join+'.length] = '+controlername+'; parameters.object = "'+join+'"+"["+ ( isNaN('+join+'.length-1)?0:'+join+'.length-1 ) +"]"; if(id !== null && id !== ""){'+join+'["'+id+'"] = '+controlername+'; if(window["$'+id+'"] === undefined)window["$'+id+'"] = '+controlername+';} ;}');
        // eval('parameters.object = "'+join+'"+"["+ ( isNaN(Object.keys('+join+').length-1)?0:Object.keys('+join+').length-1 ) +"]"; ');
        if(onlyone === true){
            // console.log('++',obCount);
            eval('parameters.object = "'+join+'"; ');
        }else{
            eval('parameters.object = "'+join+'"+"["+ obCount +"]"; ');         
        }
        
        // console.log(' if(window["$'+id+'"] === undefined)window["$'+id+'"] = '+controlername+'; ');          
        // eval(' if(window["$'+id+'"] === undefined)window["$'+id+'"] = '+controlername+'; ');            
        
        if(id !== null){            
            // console.log(' if(window["$'+id+'"] === undefined)window["$'+id+'"] = '+join+'; ');            
            // console.log(' window["$'+id+'"] = '+join+'; ');            
            eval(' window["$'+id+'"] = '+join+'; ');            
        }

        // eval('console.log(parameters);');        
        
        // console.log(parameters);
        
        setTimeout(function(parameters,element){
            if(callback)callback(parameters,element);
        },300,parameters,element);

}




// 
RaizComponents.prototype.setProps = function(element,parameters){
    var props = {};
    var attrs = element.attributes;
    for(var key in attrs){
        if(typeof  attrs[key] !== 'object') continue;
        var attrName = String(attrs[key].name);
        props[String(attrs[key].name)] = attrs[key].value;

    }
    return props;
}

var RaizBind = (function(){
	function RaizBind(){
		this.name = 'bind';

		raiz$f._event(window,'load',function(){			
			// raiz.loop(function(){	

			/*raiz$f._timeFrame(function(){			
				RaizBind.prototype.checkNewElemensInDom();
			});	*/
				RaizBind.prototype.checkNewElemensInDom();
				// RaizBind.prototype.init();
			// });			
		});

	}

	

	return RaizBind;
})();
raiz.attachModule(RaizBind);


RaizBind.prototype.checkNewElemensInDom = function(){
/*	var countElements = document.getElementsByTagName('*').length;
	if(countElements != RaizComponents.prototype.checkNewElemensInDom.countElements){
		RaizComponents.prototype.checkNewElemensInDom.countElements = countElements;
		RaizComponents.prototype.monitorElements();
	}*/

	var sizeDocument = document.querySelector('html').textContent.length;
	if(sizeDocument != RaizBind.prototype.checkNewElemensInDom.sizeDocument){		
		RaizBind.prototype.checkNewElemensInDom.sizeDocument = sizeDocument;
		RaizBind.prototype.init();
	}
	
	// RaizComponents.prototype.monitorElements();

	// window.requestAnimationFrame(function(){ 
	setTimeout(function(){
		RaizBind.prototype.checkNewElemensInDom();
	},1000);
	// });
}



RaizBind.prototype.init = function(){


	var raizIfrAll = document.querySelectorAll('[raiz-bind],[raiz-bind-blur]');

	

	for (var i = 0; i < raizIfrAll.length; i++) {
		var el = raizIfrAll[i];

		var attrValue = el.getAttribute('raiz-bind');
		var attrValueBlur = el.getAttribute('raiz-bind-blur');

		try {
			if( el.raiz.bind.init == true )continue;
			el.raiz.bind.init = true;
		} catch(e) {
			// statements
			// console.log(e);
		}
		
			// console.log(attrValueBlur);

		// if( attrValue.replace(/ /g,'') !== ''){
			// attrValue = el.raiz.attr['raiz-bind'].reference;
		if(attrValue !== null){
			RaizBind.prototype.start('change','raiz-bind',el,attrValue);
		}

		// if( attrValueBlur.replace(/ /g,'') !== ''){
		if(attrValueBlur !== null){
			// attrValueBlur = el.raiz.attr['raiz-bind-blur'].reference;
			RaizBind.prototype.start('blur','raiz-bind-blur',el,attrValueBlur);
		}
	}
}

RaizBind.prototype.start = function(modeAction,attrName,el,valueBind){

	if(typeof el.raiz === 'undefined') 
		el.raiz = {}

	if(el.raiz.bind == undefined) 
		el.raiz.bind = {}

	// console.log();
	
	if(el.raiz.bind[modeAction] == undefined) 
		el.raiz.bind[modeAction] = {};	

	// console.log(modeAction);

	if(typeof el.raiz.attr === 'undefined') 
		el.raiz.attr = {};

	// console.log(el.raiz.attr[attrName].reference);

		try {
			el.raiz.bind[modeAction].reference = el.raiz.attr[attrName].reference;
		} catch(e) {
			el.raiz.bind[modeAction].reference = valueBind;
		}
	
	// el.raiz.bind[modeAction].reference = valueBind;


	// if( el.raiz.bind.init === true )return;

		// el.raiz.bind.init = true;


	RaizBind.prototype.loop(el,modeAction,modeAction);
	RaizBind.prototype.keyChange(el,modeAction,modeAction);
	// loop(loop,el,attrValue);
}


RaizBind.prototype.keyChange = function(el,modeAction,bindName){

	var attrValue = el.raiz.bind[bindName].reference || '';
/*
	if(el.tagName == 'INPUT'){
				var eventType = 'input';
			}else if(el.tagName == 'INPUT'){
				var eventType = 'change keyup';
			}else{
				var eventType = 'change keyup';				
			}*/

			if(modeAction === 'change'){
				var eventType = 'change keyup';
			}else{
				var eventType = modeAction;				
			}

			

				raiz$f._event(el, eventType, function(obj,attrValue){
					
					
					var isFocused = (document.activeElement === this);
					if(isFocused || modeAction !== 'change'){
						var finishType = "string";
						if(this.type == 'checkbox' || el.type == 'radio'){
							if(this.checked == true)
								var text = true;
							else 
								var text = false;
							finishType = "boolean"
						}else{

							if(this.value !== undefined){
								var text = this.value;
							}
							else{
								var text = this.innerHTML;
							}

							

							// text = text.replace(/\n/g,'\\n');
							// text = text.replace(/\"/g,'\\"');
						}

						

						

						var reference = this.raiz.bind[bindName].reference;

						reference = reference.replace(/\{\{/,'');
						reference = reference.replace(/\}\}/,'');
						
						var classEvent = raiz.getClassEvent(this.parentNode);		
						if(classEvent !== false){
							reference = reference.replace(/this\./g,classEvent+'.');
							reference = reference.replace(/self\./g,classEvent+'.');
						}
						
						

						if(finishType == "string"){
							// try {
								// eval('a1 = \''+text+'\'');
								eval(reference+'= text;');
								// eval(reference+'= \''+text+'\';');
								// console.log($plugins.$front.$manager.filecurrent.body);
								
							// } catch(e) {
								
							// }
						}
						if(finishType == "boolean"){
							eval(reference+'= text;');
							// eval(reference+'='+text+';');
						}

				
					}
				},null,attrValue);
			
				
}


RaizBind.prototype.loop = function(el,modeAction,bindName){
	el.raiz.bind[bindName].init = true;


			// console.log(bindName);

			/*try{
				el.raiz[bindName].reference = el.raiz.bind[bindName].reference;				
			}catch(e){}*/


			var attrValue = el.raiz.bind[bindName].reference || '';


			

			var classEvent = raiz.getClassEvent(el.parentNode);		
			if(classEvent !== false){
				attrValue = attrValue.replace(/this\./g,classEvent+'.');
				attrValue = attrValue.replace(/self\./g,classEvent+'.');
			
			}

			attrValue = attrValue.replace(/\{\{/g,'');
			attrValue = attrValue.replace(/\}\}/g,'');

			

			try{

				// var val = eval(attrValue);		
						
				// if(el.type == 'checkbox' || el.type == 'radio')el.checked = val;

			}catch(e){}

			var isFocused = (document.activeElement === el);
			if(!isFocused){

				try{
					// console.log(attrValue);
					var val = eval(attrValue);		

					if(val === undefined){
						val = '';
					}

					

					if(el.type == 'checkbox' || el.type == 'radio'){						
						el.checked = val;
					}else{

						if(el.value === undefined){			
							if(el.innerHTML !== val && val != undefined ){							
								el.innerHTML = val;
							}
						}else{

							if(el.value !== val && val != undefined ){
								el.value = val;
							}
						}
					}
				}catch(e){

				}
			}

			
			setTimeout(function(el,modeAction,bindName){
				RaizBind.prototype.loop(el,modeAction,bindName);
			},1000,el,modeAction,bindName);
}



